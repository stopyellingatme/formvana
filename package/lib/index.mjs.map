{"version":3,"file":"index.mjs","sources":["../node_modules/svelte/internal/index.mjs","../node_modules/svelte/store/index.mjs","core/FieldConfig.ts","core/types.ts","core/internal.ts","core/Form.ts","../node_modules/reflect-metadata/Reflect.js","core/decorators.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.35.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { SvelteComponent } from \"svelte\";\nimport { writable, Writable } from \"svelte/store\";\nimport {\n  ElementAttributesMap,\n  FieldAttributes,\n  RefDataItem,\n  ValidationError,\n} from \"./types\";\n\nexport interface FieldGroup {\n  name: string;\n  label?: string;\n}\n\nexport interface FieldStep {\n  index: number;\n  label?: string;\n}\n\n/**\n * FieldConfig is used to help with the form auto generation functionality.\n *\n * This is not meant to be a complete HTML Input/Select/etc replacement.\n * It is simply a vehicle to help give the form generator\n * an easy-to-use format to work with.\n */\nexport class FieldConfig {\n  constructor(name: string, init: Partial<FieldConfig>) {\n    if (name) {\n      this.name = name;\n    } else {\n      throw new Error(\n        \"{name: string} is required for FieldConfig intialization.\"\n      );\n    }\n    // I know, Object.assign... lots of freedom there.\n    Object.assign(this, init);\n\n    if (!this.selector && !this.template) {\n      throw new Error(\n        `Please pass in a valid Element.\\nEither a string selector or a SvelteComponent.`\n      );\n    }\n\n    // Set the type attribute if it's not already set\n    if (this.attributes && !this.attributes[\"type\"]) {\n      this.attributes[\"type\"] = this.type;\n    } else if (!this.attributes) {\n      this.attributes = {};\n      this.attributes[\"type\"] = this.type;\n    }\n\n    /**\n     * Trying to set some sane defaults when initializing field.\n     * These can be over-written easily by simply adding a value to your\n     * class field.\n     * E.g. class YourClass{ description: string = \"This is a descriptor.\" }\n     * The text \"This is a descriptor.\" will be linked to the FieldConfig.value\n     * when the fields are built from the model (in Form.buildFields();)\n     */\n    switch (this.type) {\n      case \"text\" || \"email\" || \"password\" || \"string\":\n        // this.setInitialValue(\"\");\n        this.value.set(\"\");\n        break;\n      case \"decimal\" || \"double\":\n        // this.setInitialValue(0.0);\n        this.value.set(0.0);\n        break;\n      case \"number\" || \"int\" || \"integer\":\n        this.value.set(0);\n        // this.setInitialValue(0);\n        break;\n      case \"boolean\" || \"choice\" || \"radio\" || \"checkbox\":\n        this.value.set(false);\n        // this.setInitialValue(false);\n        this.options = [];\n        break;\n      case \"select\" || \"dropdown\":\n        this.options = [];\n        break;\n\n      default:\n        this.value.set(undefined);\n        // this.setInitialValue(undefined);\n        break;\n    }\n\n    // If there's no aria-label and the title attribute is present...\n    if (!this.attributes[\"aria-label\"] && this.attributes[\"title\"]) {\n      // Set aria-label = title\n      this.attributes[\"aria-label\"] = this.attributes[\"title\"];\n    } else if (!this.attributes[\"aria-label\"]) {\n      // If no aria-label then set it to the label or name\n      this.attributes[\"aria-label\"] = this.label || this.name;\n    }\n  }\n\n  /**\n   * Only set \"name\" if you are using FieldConfig apart from\n   * your object/model.\n   * I.e. you are using plain JSON rather than a TS class.\n   */\n  readonly name: string;\n\n  // Used to add and remove event listeners\n  node?: HTMLElement;\n\n  /**\n   * Value is a writable store defaulting to undefined.\n   */\n  value: Writable<any> = writable(undefined);\n  required?: boolean;\n  type: string = \"text\"; // Defaults to text, for now\n  label?: string;\n  hint?: string;\n\n  /**\n   * el can be either String or Svelte Component.\n   * This allows us a more flexible dynamic field generator.\n   * Using a template also allows you to style each input as needed.\n   */\n  selector?: string;\n  template?: SvelteComponent;\n\n  /**\n   * You can use these to apply styles.\n   * However, using a template/component is recommended.\n   *\n   */\n  styles?: string;\n  classes?: string;\n\n  /**\n   * Used if there is a set of \"options\" to choose from.\n   */\n  options?: RefDataItem[];\n  ref_key?: string; // Reference data key\n\n  disabled?: boolean;\n  hidden?: boolean;\n\n  /**\n   * Validation Errors!\n   * We're mainly looking for the class-validator \"constraints\"\n   * One ValidationError object can have multiple errors (constraints)\n   */\n  errors: Writable<ValidationError | undefined> = writable(undefined);\n\n  /**\n   * * JSON of things like:\n   * * * disabled\n   * * * id=\"something\"\n   * * * type=\"text || email || password || whatever\"\n   * * * class='input class'\n   * * * title='input title'\n   * * * multiple\n   * * * etc.\n   * * * anything you want!\n   */\n  attributes?: FieldAttributes;\n  // attributes: Object = {};\n\n  group?: FieldGroup;\n  step?: FieldStep;\n\n  // private initial_value: NonNullable<any>;\n\n  // private clearValue = (): void => {\n  //   this.value.set(this.initial_value);\n  // };\n\n  private clearErrors = (): void => {\n    this.errors.set(undefined);\n  };\n\n  clear = (): void | undefined => {\n    // this.clearValue();\n    this.clearErrors();\n  };\n\n  // setInitialValue = (value: any): void => {\n  //   this.initial_value = value;\n  //   this.value.set(value);\n  // };\n}\n","import { Form } from \".\";\n\n/**\n * I'm using strings here for easier comparison.\n */\nexport type InitialFormState<ModelType extends Object> = {\n  model: ModelType | undefined;\n  errors: ValidationError[] | undefined;\n};\n\n// export type ObjectKeys<T> = T extends object\n//   ? (keyof T)[]\n//   : T extends number\n//   ? []\n//   : T extends Array<any> | string\n//   ? string[]\n//   : never;\n\n// export interface ObjectConstructor {\n//   keys<T>(o: T): ObjectKeys<T>;\n// }\n\n// export interface ModelType<T extends Object & ObjectConstructor> {\n//   keys<T>(o: T): ObjectKeys<T>;\n// };\n\n/**\n * Base interface for managing multiple instances of Form\n * classes.\n *\n * TODO: Class for FormGroup and FormStepper\n */\nexport interface FormManager {\n  forms: Form<typeof Form>[];\n}\n\n//#region Validation\n\nexport interface ValidationCallback {\n  callback: Callback;\n  /**\n   * When should the callback fire?\n   * \"before\" or \"after\" validation?\n   */\n  when: \"before\" | \"after\";\n}\n\nexport type ValidatorFunction = (...args: any[]) => Promise<ValidationError[]>;\n\nexport interface ValidationErrorType {\n  target?: Object; // Object that was validated.\n  property: string; // Object's property that didn't pass validation.\n  value?: any; // Value that didn't pass a validation.\n  constraints?: {\n    // Constraints that failed validation with error messages.\n    [type: string]: string;\n  };\n  children?: ValidationErrorType[];\n}\n\nexport class ValidationError {\n  /**\n   * @param errors essentially Record<string #1, string #2>\n   * with #1 being the name of the error constraint\n   * and #2 being the error message\n   * @param model_property_key, which model field are we linking this to?\n   * @param options, anything else part of the ValidationErrorType\n   */\n  constructor(\n    model_property_key?: string,\n    errors?: { [type: string]: string },\n    options?: Partial<ValidationErrorType>\n  ) {\n    if (model_property_key) this.property = model_property_key;\n    if (errors) {\n      this.constraints = errors;\n    }\n    if (options) {\n      let k: keyof typeof options;\n      for (k in options) {\n        this[k] = options[k];\n      }\n      // Object.keys(this).forEach((key) => {\n      //   this[key] = options[key];\n      // });\n    }\n  }\n\n  target?: Object; // Object that was validated.\n  property?: string; // Object's property that didn't pass validation.\n  value?: any; // Value that didn't pass a validation.\n  constraints?: {\n    // Constraints that failed validation with error messages.\n    [type: string]: string;\n  };\n  children?: ValidationErrorType[];\n}\n\nexport interface ValidationOptions {\n  /**\n   * This is the (validation) function that will be called when validating.\n   * You can use any validation library you like, as long as this function\n   * returns Promise<ValidationError[]>\n   */\n  validator: ValidatorFunction | undefined;\n  /**\n   * Validation options come from class-validator ValidatorOptions.\n   *\n   * Biggest perf increase comes from setting validationError.target = false\n   * (so the whole model is not attached to each error message)\n   */\n  options?: Partial<ValidatorOptions>;\n  /**\n   * Name of the property which links errors to fields.\n   * Error.property_or_name_or_whatever must match field.name.\n   * ValidationError[name] must match field.name.\n   */\n  field_error_link_name: keyof ValidationError;\n}\n\n/**\n * Options passed to validator during validation.\n * Note: this interface used by class-validator\n */\nexport interface ValidatorOptions extends Record<string, unknown> {\n  /**\n   * If set to true then class-validator will print extra warning messages to the console when something is not right.\n   */\n  enableDebugMessages?: boolean;\n  /**\n   * If set to true then validator will skip validation of all properties that are undefined in the validating object.\n   */\n  skipUndefinedProperties?: boolean;\n  /**\n   * If set to true then validator will skip validation of all properties that are null in the validating object.\n   */\n  skipNullProperties?: boolean;\n  /**\n   * If set to true then validator will skip validation of all properties that are null or undefined in the validating object.\n   */\n  skipMissingProperties?: boolean;\n  /**\n   * If set to true validator will strip validated object of any properties that do not have any decorators.\n   *\n   * Tip: if no other decorator is suitable for your property use @Allow decorator.\n   */\n  whitelist?: boolean;\n  /**\n   * If set to true, instead of stripping non-whitelisted properties validator will throw an error\n   */\n  forbidNonWhitelisted?: boolean;\n  /**\n   * Groups to be used during validation of the object.\n   */\n  groups?: string[];\n  /**\n   * Set default for `always` option of decorators. Default can be overridden in decorator options.\n   */\n  always?: boolean;\n  /**\n   * If [groups]{@link ValidatorOptions#groups} is not given or is empty,\n   * ignore decorators with at least one group.\n   */\n  strictGroups?: boolean;\n  /**\n   * If set to true, the validation will not use default messages.\n   * Error message always will be undefined if its not explicitly set.\n   */\n  dismissDefaultMessages?: boolean;\n  /**\n   * ValidationError special options.\n   */\n  validationError?: {\n    /**\n     * Indicates if target should be exposed in ValidationError.\n     */\n    target?: boolean;\n    /**\n     * Indicates if validated value should be exposed in ValidationError.\n     */\n    value?: boolean;\n  };\n  /**\n   * Settings true will cause fail validation of unknown objects.\n   */\n  forbidUnknownValues?: boolean;\n  /**\n   * When set to true, validation of the given property will stop after encountering the first error. Defaults to false.\n   */\n  stopAtFirstError?: boolean;\n}\n\n//#endregion\n\n//#region Events\n/**\n * Determines which events to validate/clear validation, on.\n * And, you can bring your own event listeners just by adding one on\n * the init.\n * Enabled By Default: blue, change, focus, input, submit\n *\n * Also has the good ole Object.assign in the constructor.\n * It's brazen, but you're a smart kid.\n * Use it wisely.\n *\n * Should be keyof HTMLElementEventMap\n */\nexport class OnEvents {\n  constructor(init?: Partial<OnEvents>, disableAll: boolean = false) {\n    // If disableAll is false, turn off all event listeners\n    if (disableAll) {\n      let k: keyof OnEvents | string;\n      for (k in this) {\n        this[k as keyof OnEvents] = false;\n      }\n    }\n    Object.assign(this, init);\n  }\n\n  blur: boolean = true;\n  change: boolean = true;\n  click: boolean = false;\n  dblclick: boolean = false;\n  focus: boolean = true;\n  input: boolean = true;\n  keydown: boolean = false;\n  keypress: boolean = false;\n  keyup: boolean = false;\n  mount: boolean = false;\n  mousedown: boolean = false;\n  mouseenter: boolean = false;\n  mouseleave: boolean = false;\n  mousemove: boolean = false;\n  mouseout: boolean = false;\n  mouseover: boolean = false;\n  mouseup: boolean = false;\n  submit: boolean = true;\n}\n\n/**\n * Should we link the values always?\n * Or only if the form is valid?\n */\nexport type LinkOnEvent = \"always\" | \"valid\";\n\nexport type LinkValuesOnEvent = \"all\" | \"field\";\n\n//#endregion\n\n//#region Misc\nexport type Callback = ((...args: any[]) => any) | (() => any);\n\n/**\n * Data format for the reference data items\n * Form.refs are of type Record<string, RefDataItem[]>\n */\nexport interface RefDataItem {\n  label: string;\n  value: any;\n  data?: any;\n}\n\nexport type RefData = Record<string, RefDataItem[]>;\n\nexport type FieldAttributes = Record<Partial<ElementAttributesMap>, any>;\n\nexport type ElementAttributesMap =\n  | (keyof HTMLElement &\n      keyof HTMLInputElement &\n      keyof HTMLImageElement &\n      keyof HTMLFieldSetElement &\n      keyof HTMLAudioElement &\n      keyof HTMLButtonElement &\n      keyof HTMLCanvasElement &\n      keyof HTMLFormElement &\n      keyof HTMLSelectElement &\n      keyof HTMLOptionElement)\n  | string;\n\n//#endregion\n","import { get, writable, Writable } from \"svelte/store\";\nimport { FieldConfig } from \"./FieldConfig\";\nimport { Form } from \"./Form\";\nimport {\n  Callback,\n  OnEvents,\n  ValidationCallback,\n  ValidationError,\n  InitialFormState,\n  FieldAttributes,\n} from \"./types\";\n\n//#region Utility Functions\n\n// Get the form field by name\nexport function _get(name: string, fields: FieldConfig[]): FieldConfig {\n  return fields.filter((f) => f.name === name)[0];\n}\n\n/**\n *\n * Build the field configs from this.model using metadata-reflection.\n * More comments inside...\n */\nexport function _buildFormFields<T extends Object>(\n  model: T,\n  // Grab the editableProperties from the @field decorator\n  props: string[] = Reflect.getMetadata(\"editableProperties\", model)\n): FieldConfig[] {\n  // Map the @field fields to the form.fields\n  const fields = props.map((prop: string) => {\n    // Get the @FieldConfig using metadata reflection\n    const field: FieldConfig = new FieldConfig(prop, {\n      ...Reflect.getMetadata(\"fieldConfig\", model, prop),\n    });\n\n    // If the model has a value, attach it to the field config\n    // 0, \"\", [], etc. are set in the constructor based on type.\n    if (model[prop as keyof T]) {\n      field.value.set(model[prop as keyof T]);\n      // field.setInitialValue(model[prop as keyof T]);\n    }\n\n    // We made it. Return the field config and let's generate some inputs!\n    return field;\n  });\n  return fields;\n}\n\nexport function _getRequiredFieldNames(fields: FieldConfig[]): string[] {\n  let required_field_names: string[] = [];\n  fields.forEach((f) => {\n    if (f.required) {\n      required_field_names.push(f.name);\n    }\n  });\n  return required_field_names;\n}\n\n/**\n * Helper function for value_change emitter.\n * Write the form's value changes to form.value_changes.\n *\n * @param changes incoming value changes\n * @param field field emitting the changes\n */\nexport function _setValueChanges(\n  changes: Writable<Record<string, any>>,\n  field: FieldConfig\n): void {\n  const _changes = get(changes);\n\n  // The change is on the same field\n  if (_changes[field.name]) {\n    _changes[field.name] = get(field.value);\n    changes.set({ ..._changes });\n  } else {\n    // Change is on a different field\n    changes.set({ ..._changes, [field.name]: get(field.value) });\n  }\n}\n\n//#endregion\n\n//#region HTML Event Helpers\n\n/**\n * Attach the OnEvents events to each form.field.\n * Parent: form.useField(...)\n */\nexport function _attachEventListeners(\n  field: FieldConfig,\n  on_events: OnEvents,\n  callback: Callback\n): void {\n  Object.entries(on_events).forEach(([eventName, shouldListen]) => {\n    // If shouldListen true, then add the event listener\n    if (shouldListen) {\n      field.node &&\n        field.node.addEventListener(\n          eventName,\n          (e: Event) => callback(e),\n          false\n        );\n    }\n  });\n}\n\nexport function _attachOnClearErrorEvents(\n  node: HTMLElement,\n  clear_errors_on_events: OnEvents,\n  callback: Callback\n): void {\n  Object.entries(clear_errors_on_events).forEach(\n    ([eventName, shouldListen]) => {\n      // If the OnEvent is true, then add the event listener\n      if (shouldListen) {\n        node.addEventListener(eventName, (e: Event) => callback(e), false);\n      }\n    }\n  );\n}\n\nexport function _addCallbackToField<T>(\n  form: Form<T>,\n  field: FieldConfig,\n  event: keyof HTMLElementEventMap,\n  callbacks: ValidationCallback[] | Callback,\n  with_validation_event: boolean = true,\n  required_fields: string[],\n  field_names: string[]\n): void {\n  if (with_validation_event && Array.isArray(callbacks)) {\n    field.node &&\n      field.node.addEventListener(\n        event,\n        (e) =>\n          _handleValidationEvent(\n            form,\n            required_fields,\n            field_names,\n            undefined,\n            callbacks\n          ),\n        false\n      );\n  } else if (!Array.isArray(callbacks)) {\n    field.node &&\n      field.node.addEventListener(event, (e) => callbacks(e), false);\n  }\n}\n\n//#endregion\n\n//#region Linking Utilities\n\n// Link values from FIELDS toMODEL or MODEL to FIELDS\nexport function _linkValues<ModelType extends Object>(\n  fromFieldsToModel: boolean,\n  fields: FieldConfig[],\n  model: ModelType\n): void {\n  // Still the fastest way i've seen to loop in JS.\n  let i = 0,\n    len = fields.length;\n  for (; len > i; ++i) {\n    // Get name and value of the field\n    const name = fields[i].name,\n      val = fields[i].value;\n    if (fromFieldsToModel) {\n      // Link field values to the model\n      model[name as keyof ModelType] = get(val);\n    } else {\n      // Link model values to the fields\n      val.set(model[name as keyof ModelType]);\n    }\n  }\n}\n\n/**\n * Currently this depends on class-validator.\n * TODO: Disconnect class-validator dependency from all functions\n */\nexport function _linkFieldErrors(\n  errors: ValidationError[],\n  field: FieldConfig,\n  filter_term: keyof ValidationError\n): void {\n  const error = errors.filter((e) => e[filter_term] === field.name);\n  // Check if there's an error for the field\n  if (error && error.length > 0) {\n    field.errors.set(error[0]);\n  } else {\n    field.errors.set(undefined);\n  }\n}\n\nexport function _linkAllErrors(\n  errors: ValidationError[],\n  fields: FieldConfig[]\n): void {\n  errors.forEach((err) => {\n    if (err && err.property) {\n      const f = _get(err.property, fields);\n      f.errors.set(err);\n    }\n  });\n}\n\nexport function _hanldeValueLinking<T extends Object>(\n  form: Form<T>,\n  field?: FieldConfig\n): void {\n  /**\n   * Link the input from the field to the model.\n   * We dont't link (just) the field value.\n   * We link all values just in case the field change propigates \n   * to other field changes.\n   */\n  if (form.link_fields_to_model === \"always\") {\n    _linkValues(true, form.fields, form.model);\n  } else if (form.link_fields_to_model === \"valid\") {\n    _linkValues(true, form.fields, form.model);\n  }\n}\n\n//#endregion\n\n//#region Validation Helpers\n\nfunction _handleValidationCallbacks(\n  when_to_call: \"before\" | \"after\",\n  callbacks: ValidationCallback[]\n): void {\n  if (callbacks && callbacks.length > 0)\n    callbacks.forEach((cb) => {\n      if (cb.when === when_to_call) {\n        cb.callback();\n      }\n    });\n}\n\n/**\n * This is used to add functions and callbacks to the OnEvent\n * handler. Functions can be added in a plugin-style manner now.\n */\nexport function _executeCallbacks(callbacks: Callback | Callback[]): void {\n  if (Array.isArray(callbacks)) {\n    callbacks.forEach((cb) => {\n      cb();\n    });\n  } else {\n    callbacks();\n  }\n}\n\nfunction _executeIfTrue(is_true: boolean, cb: Callback): void {\n  if (is_true) cb();\n}\n\n/**\n * Hanlde the events that will fire for each field.\n * Corresponds to the form.on_events field.\n *\n */\nexport function _handleValidationEvent<T extends Object>(\n  form: Form<T>,\n  required_fields: string[],\n  field_names: string[],\n  field?: FieldConfig,\n  callbacks?: ValidationCallback[]\n): Promise<ValidationError[]> | undefined {\n  if (form.validation_options.validator) {\n    _executeCallbacks([\n      /**\n       * Link the input from the field to the model.\n       * We aren't linking (only) the field value.\n       * We link all values just in case the field change propigates other field changes.\n       */\n      () => _hanldeValueLinking(form, field),\n\n      () => {\n        if (field) _setValueChanges(form.value_changes, field);\n      },\n\n      () => {\n        if (callbacks) _handleValidationCallbacks(\"before\", callbacks);\n      },\n    ]);\n\n    return form.validation_options\n      .validator(form.model, form.validation_options.options)\n      .then((errors: ValidationError[]) => {\n        _executeCallbacks([\n          () => _handleFormValidation(form, errors, required_fields, field),\n          () => {\n            if (form.hidden_fields)\n              _negateField(form.hidden_fields, field_names, form.fields, {\n                type: \"hide\",\n                value: true,\n              });\n          },\n\n          () => {\n            if (form.disabled_fields)\n              _negateField(form.disabled_fields, field_names, form.fields, {\n                type: \"disable\",\n                value: true,\n              });\n          },\n\n          () => _hasStateChanged(form.value_changes, form.changed),\n\n          () => {\n            if (callbacks) _handleValidationCallbacks(\"after\", callbacks);\n          },\n        ]);\n        return errors;\n      });\n  }\n}\n\n/**\n * Handle all the things associated with validation!\n * Link the errors to the fields.\n * Check if all required fields are valid.\n * Link values from fields to model if\n * form.link_fields_to_model === LinkOnEvent.Valid is true.\n */\nexport async function _handleFormValidation<T extends Object>(\n  form: Form<T>,\n  errors: ValidationError[],\n  required_fields: string[],\n  field?: FieldConfig\n): Promise<ValidationError[]> {\n  // There are errors!\n  if (errors && errors.length > 0) {\n    form.errors = errors;\n\n    // Are we validating the whole form or just the fields?\n    if (field) {\n      // Link errors to field (to show validation errors)\n      if (form.validation_options.field_error_link_name) {\n        _linkFieldErrors(\n          errors,\n          field,\n          form.validation_options.field_error_link_name\n        );\n      }\n    } else {\n      // This is validatino for the whole form!\n      _linkAllErrors(errors, form.fields);\n    }\n\n    // All required fields are valid?\n    if (_requiredFieldsValid(errors, required_fields)) {\n      form.valid.set(true);\n    } else {\n      form.valid.set(false);\n    }\n  } else {\n    // We can't get here unless the errors we see are for non-required fields\n\n    // If the config tells us to link the values only when the form\n    // is valid, then link them here.\n    _hanldeValueLinking(form, field);\n    form.clearErrors(); // Clear form errors\n    form.valid.set(true); // Form is valid!\n  }\n  return errors;\n}\n\n/**\n * TODO: Clean up this arfv implementation. Seems too clunky.\n *\n * Check if there are any required fields in the errors.\n * If there are no required fields in the errors, the form is valid\n */\nexport function _requiredFieldsValid(\n  errors: ValidationError[],\n  required_fields: string[]\n): boolean {\n  if (errors.length === 0) return true;\n  // Go ahead and return if there are no errors\n  let i = 0,\n    len = required_fields.length;\n  // If there are no required fields, just go ahead and return\n  if (len === 0) return true;\n  // Otherwise we have to map the names of the errors so we can\n  // check if they're for a required field\n  const errs = errors.map((e) => e.property);\n  for (; len > i; ++i) {\n    if (errs.indexOf(required_fields[i]) !== -1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n//#endregion\n\n//#region - Form State\n\n/**\n * Is the current form state different than the initial state?\n *\n * I've tested it with > 1000 fields in a single class with very slight input lag.\n */\nexport function _hasStateChanged(\n  value_changes: Writable<Record<string, any>>,\n  changed: Writable<boolean>\n): void {\n  const changes = get(value_changes) !== {} ? get(value_changes) : null;\n\n  if (changes && Object.keys(changes).length > 0) {\n    changed.set(true);\n    return;\n  }\n  changed.set(false);\n}\n\n/**\n * Grab a snapshot of several items that generally define the state of the form\n * and serialize them into a format that's easy-ish to check/deserialize (for resetting)\n */\nexport function _setInitialState<T extends Object>(\n  form: Form<T>,\n  initial_state: InitialFormState<T>\n): InitialFormState<T> {\n  initial_state.model = Object.assign({}, form.model);\n  if (form.errors && form.errors.length > 0) {\n    initial_state.errors = form.errors.map((e) => e);\n  } else {\n    initial_state.errors = [];\n  }\n  return initial_state;\n}\n\n/**\n * This one's kinda harry.\n * But it resets the form to it's initial state.\n */\nexport function _resetState<T extends Object>(\n  form: Form<T>,\n  initial_state: InitialFormState<T>\n): void {\n  // !WHEN RESETTING, YOU CANNOT OVERWRITE THE MODEL. VALIDATION GETS FUCKED UP!\n  let k: keyof Form<T>[\"model\"];\n  if (initial_state.model)\n    for (k in initial_state.model) {\n      form.model[k] = initial_state.model[k];\n    }\n\n  if (initial_state.errors && initial_state.errors.length > 0) {\n    form.errors = initial_state.errors.map((e) => e);\n  } else {\n    form.errors = [];\n  }\n\n  _linkValues(false, form.fields, form.model);\n\n  if (form.errors && form.errors.length > 0) {\n    _linkAllErrors(form.errors, form.fields);\n  }\n\n  form.value_changes = writable({});\n  form.changed.set(false);\n}\n\n//#endregion\n\n//#region - Styling\n\n/**\n * Using this.field_order, rearrange the order of the fields.\n */\nexport function _createOrder(\n  field_order: string[],\n  fields: FieldConfig[]\n): FieldConfig[] {\n  let newLayout: FieldConfig[] = [];\n  let leftovers: FieldConfig[] = [];\n  // Loop over the order...\n  field_order.forEach((name) => {\n    const field = _get(name, fields);\n    // If the field.name and the order name match...\n    if (field.name === name) {\n      // Then push it to the fields array\n      newLayout.push(field);\n    } else if (\n      leftovers.indexOf(field) === -1 &&\n      field_order.indexOf(field.name) === -1\n    ) {\n      // Field is not in the order, so push it to bottom of order.\n      leftovers.push(field);\n    }\n  });\n  fields = [...newLayout, ...leftovers];\n  return fields;\n}\n\nexport function _setFieldAttribute(\n  name: string,\n  fields: FieldConfig[],\n  attributes: Partial<FieldConfig>\n): void {\n  // Get field config\n  const f: FieldConfig = _get(name, fields);\n  // Loop over key of Partial FieldConfig\n  let k: keyof typeof attributes;\n  for (k in attributes) {\n    // If we hit the attributes property then we set the field.attributes\n    if (k === \"attributes\") {\n      Object.assign(f.attributes, attributes[k]);\n    } else if (k !== \"name\") {\n      setFieldProperty(f, k, attributes[k]);\n    }\n  }\n}\n\n/**\n * This was initially created to deal with TS compiler errors.\n * Dynamically assigning a value to f[key] just wouldn't play nice.\n */\nfunction setFieldProperty<K extends keyof FieldConfig>(\n  f: FieldConfig,\n  key: K,\n  value: FieldConfig[K]\n) {\n  f[key] = value;\n}\n\nexport function _negateField(\n  affected_fields: Array<FieldConfig[\"name\"]>,\n  field_names: Array<FieldConfig[\"name\"]>,\n  fields: FieldConfig[],\n  negation: { type: \"disable\" | \"hide\"; value: boolean }\n): void {\n  if (\n    affected_fields &&\n    affected_fields.length > 0 &&\n    fields &&\n    fields.length > 0\n  ) {\n    let i = 0,\n      len = affected_fields.length;\n    if (len === 0) return;\n\n    for (; len > i; ++i) {\n      const field_index = field_names.indexOf(affected_fields[i]);\n\n      if (field_index !== -1) {\n        const field_name = field_names[field_index];\n\n        if (negation.type === \"disable\") {\n          _setFieldAttribute(field_name, fields, {\n            disabled: negation.value,\n            attributes: { disabled: negation.value },\n          });\n        } else if (negation.type === \"hide\") {\n          _setFieldAttribute(field_name, fields, {\n            hidden: negation.value,\n          });\n        }\n      }\n    }\n  }\n}\n\n//#endregion\n","import { get, writable, Writable } from \"svelte/store\";\nimport { FieldConfig } from \".\";\nimport {\n  OnEvents,\n  LinkOnEvent,\n  RefData,\n  ValidationError,\n  ValidationCallback,\n  ValidatorFunction,\n  Callback,\n  ValidationOptions,\n  InitialFormState,\n} from \"./types\";\nimport {\n  _buildFormFields,\n  _getRequiredFieldNames,\n  _get,\n  _attachEventListeners,\n  _attachOnClearErrorEvents,\n  _linkFieldErrors,\n  _linkAllErrors,\n  _linkValues,\n  _requiredFieldsValid,\n  _hasStateChanged,\n  _createOrder,\n  _setInitialState,\n  _resetState,\n  _handleFormValidation,\n  _handleValidationEvent,\n  _executeCallbacks,\n  _hanldeValueLinking,\n  _addCallbackToField,\n  _negateField,\n} from \"./internal\";\nimport { SvelteComponent, SvelteComponentDev } from \"svelte/internal\";\n\n/**\n * Formvana - Form Class\n * Form is NOT valid, initially.\n * If you want to make it valid, this.valid.set(true).\n *\n * The main thing to understand here is that the fields and the model are separate.\n * Fields are built using the model, via the @field() & @editable() decorators.\n * We keep the fields and the model in sync (simply) via model property names\n * which are mapped to field.name.\n * We do our best to initialize this thing with good, sane defaults without\n * adding too many restrictions.\n *\n * Recommended Use:\n *  - Initialize let form = new Form(model, {refs: REFS, template: TEMPLATE, etc.})\n *  - Set the model (if you didn't in the first step)\n *  - Attach reference data (if you didn't in the first step)\n *  - Storify the form - check example.form.ts for an example\n *  - Now you're ready to use the form!\n *  - Pass it into the DynamicForm component and let the form generate itself!\n *\n * Performance is blazing with < 500 fields.\n * Can render up to 2000 inputs in per class/fields.\n * Just break it up into 100 or so fields per form (max 250) if its a huge form.\n *  - Tested on late 2014 mbp - 2.5ghz core i7, 16gb ram\n *\n * TODO: Create FormManager interface for dealing with FormGroup and FormStepper classes\n * TODO: Create easy component/pattern for field groups and stepper/wizzard\n * TODO: Create plugin base for form template styling\n *\n * TODO: Allow fields, model and validator to be passed in separately.\n *  - This will allow for a more \"dynamic\" form building experience\n */\nexport class Form<ModelType extends Object> {\n  constructor(\n    model: ModelType,\n    validation_options: Partial<ValidationOptions>,\n    init?: Partial<Form<ModelType>>\n  ) {\n    if (init) Object.assign(this, init);\n\n    // If there's a model, set the inital state's and build the fields\n    if (model) {\n      this.model = model;\n      this.buildFields();\n    } else {\n      throw new Error(\"Model is not valid. Please pass in a valid model.\");\n    }\n\n    if (validation_options) {\n      Object.assign(this.validation_options, validation_options);\n    } else {\n      throw new Error(\n        \"Please add a validator with ReturnType<Promise<ValidationError[]>>\"\n      );\n    }\n    // If they passed in a field order, set the order.\n    if (this.field_order) this.setFieldOrder(this.field_order);\n\n    // Well well, reference data. Better attach that to the fields.\n    if (this.refs) this.attachRefData();\n\n    if (this.disabled_fields)\n      _negateField(this.disabled_fields, this.field_names, this.fields, {\n        type: \"disable\",\n        value: true,\n      });\n\n    if (this.hidden_fields)\n      _negateField(this.hidden_fields, this.field_names, this.fields, {\n        type: \"hide\",\n        value: true,\n      });\n\n    // Wait until everything is initalized then set the inital state.\n    _setInitialState(this, this.initial_state);\n  }\n\n  //#region ** Fields **\n\n  //#region Core Functionality Fields\n\n  /**\n   * This is your form Model/Schema.\n   * It's used to build the form.fields.\n   *\n   * The meat and potatos, some would say.\n   */\n  model: ModelType;\n\n  /**\n   * Fields are built from the model's metadata using reflection.\n   * If model is set, call buildFields().\n   */\n  fields: FieldConfig[] = [];\n\n  /**\n   * refs hold any reference data you'll be using in the form\n   * e.g. seclet dropdowns, radio buttons, etc.\n   *\n   * If you did not set the model in constructor:\n   * Call attachRefData() to link the data to the respective field\n   *\n   * * Fields & reference data are linked via field.ref_key\n   */\n  refs?: RefData;\n\n  /**\n   * Validation Options contain the logic and config for validating\n   * the form as well as linking errors to fields.\n   *\n   * Other, more fine grained options are in validation_options.options\n   */\n  validation_options: Partial<ValidationOptions> = {\n    validator: undefined,\n    options: {\n      skipMissingProperties: false,\n      dismissDefaultMessages: false,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      forbidUnknownValues: true,\n      stopAtFirstError: false,\n    },\n    field_error_link_name: \"property\",\n  };\n\n  /**\n   * The errors are of type ValidationError.\n   * Errors are attached to their corresponding fields.\n   * This pattern adds flexibility at the cost of a little complexity.\n   *\n   * When a single field is validated, the whole model is validated. We just don't\n   * show all the errors to the user. This way, we know if the form is still invalid,\n   * even if we aren't showing the user any errors (like, pre-submit-button press).\n   */\n  errors: ValidationError[] = [];\n\n  /**\n   * These next properties are all pretty self-explanatory.\n   *\n   * this.valid is a svelte store so we can change the state of the variable\n   * inside of the class and it (the change) will be reflected\n   * in the external form context.\n   */\n  valid: Writable<boolean> = writable(false);\n  changed: Writable<boolean> = writable(false);\n\n  loading: Writable<boolean> = writable(false);\n  touched: Writable<boolean> = writable(false);\n\n  /**\n   * Emits value changes as a plain JS object.\n   * Format: { [field.name]: value }\n   *\n   * Similar to Angular form.valueChanges\n   */\n  value_changes: Writable<Record<string, any>> = writable({});\n\n  /**\n   * Use the NAME of the field (field.name) to disable/hide the field.\n   */\n  hidden_fields?: Array<FieldConfig[\"name\"]>;\n  disabled_fields?: Array<FieldConfig[\"name\"]>;\n\n  /**\n   * Which events should the form do things on?\n   * (validate, link values, hide/disable fields)\n   */\n  on_events: OnEvents = new OnEvents();\n  // Which events should we clear the field errors on?\n  clear_errors_on_events: OnEvents = new OnEvents({}, true);\n\n  // When to link this.field values to this.model values\n  link_fields_to_model: LinkOnEvent = \"always\";\n\n  //#endregion\n\n  //#region Field Styling\n\n  /**\n   * Form Template Layout\n   *\n   * Render the form into a custom svelte template!\n   * Use a svelte component.\n   * * The component/template must accept {form} prop\n   *\n   * Note: add ` types\": [\"svelte\"] ` to tsconfig compilerOptions\n   * to remove TS import error of .svelte files (for your template)\n   */\n  template?:\n    | string\n    | typeof SvelteComponentDev\n    | typeof SvelteComponent\n    | typeof SvelteComponent;\n\n  //#endregion\n\n  //#region Internal Fields\n\n  /**\n   * Determines the ordering of this.fields.\n   * Simply an array of field names (or group names or stepper names)\n   * in the order to be displayed\n   */\n  private field_order: Array<FieldConfig[\"name\"]> = [];\n\n  // Used to make checking for disabled/hidden fields faster\n  private field_names: Array<FieldConfig[\"name\"]> = [];\n  /**\n   * This is the model's initial state.\n   * Shove the stateful_items into the inital state for a decent snapshot.\n   */\n  private initial_state: InitialFormState<ModelType> = {\n    model: undefined,\n    errors: undefined,\n  };\n\n  /**\n   * We keep track of required fields because we let class-validator handle everything\n   * except *required* (field.required)\n   * So if there are no required fields, but there are errors, the form is still\n   * valid. This is the mechanism to help keep track of that.\n   * Keep track of the fields so we can validate faster.\n   */\n  private required_fields: Array<FieldConfig[\"name\"]> = [];\n\n  //#endregion\n\n  //#endregion ^^ Fields ^^\n\n  //#region ** Form API **\n\n  //#region - Form Setup\n\n  /**\n   * Builds the fields from the model.\n   * Builds the field configs via this.model using metadata-reflection.\n   *\n   * TODO: Allow JSON model and schema validation/setup\n   */\n  buildFields = (model = this.model): void => {\n    this.fields = _buildFormFields(model);\n    // Set the field names for faster searching\n    //(instead of mapping the names (potentially) each keystoke)\n    this.field_names = this.fields.map((f) => f.name);\n    this.required_fields = _getRequiredFieldNames(this.fields);\n  };\n\n  /**\n   * ATTACH TO SAME ELEMENT AS FIELD.NAME!\n   *\n   * Use on the element that will be interacted with.\n   * e.g. <input/> -- <button/> -- <select/> -- etc.\n   * Check examples folder for more details.\n   *\n   * * This hooks up the event listeners!\n   *\n   * This is for Svelte's \"use:FUNCTION\" feature.\n   * The \"use\" directive passes the HTML Node as a parameter\n   * to the given function (e.g. use:useField(node: HTMLElement)).\n   */\n  useField = (node: HTMLElement & { name: string }): void => {\n    // Attach HTML Node to field so we can remove event listeners later\n    const field = _get(node.name, this.fields);\n    field.node = node;\n\n    _attachEventListeners(field, this.on_events, (e: Event) =>\n      _handleValidationEvent(\n        this,\n        this.required_fields,\n        this.field_names,\n        field\n      )\n    );\n    _attachOnClearErrorEvents(node, this.clear_errors_on_events, (e: Event) => {\n      field.errors.set(undefined);\n    });\n  };\n\n  /**\n   * Load new data into the form and build the fields.\n   * Data is updated IN PLACE by default.\n   * Reinitialize is set to false, by default.\n   *\n   * Inital State is not updated by default.\n   */\n  loadData = <T extends ModelType>(\n    data: T,\n    reinitialize: boolean = false,\n    update_initial_state: boolean = false\n  ): Form<ModelType> => {\n    if (reinitialize) {\n      this.model = data;\n      this.buildFields();\n    } else {\n      let key: keyof ModelType;\n      for (key in this.model) {\n        this.model[key] = data[key];\n      }\n      _linkValues(false, this.fields, this.model);\n    }\n\n    if (update_initial_state) this.updateInitialState();\n\n    return this;\n  };\n\n  /**\n   * Pass in the reference data to add options to fields.\n   */\n  attachRefData = (refs?: RefData): void => {\n    const fields_with_ref_keys = this.fields.filter((f) => f.ref_key);\n    if (refs) {\n      this.refs = refs;\n      fields_with_ref_keys.forEach((field) => {\n        if (field.ref_key) field.options = refs[field.ref_key];\n      });\n    } else if (this.refs) {\n      fields_with_ref_keys.forEach((field) => {\n        if (field.ref_key && this.refs)\n          field.options = this.refs[field.ref_key];\n      });\n    }\n  };\n  //#endregion\n\n  //#region - Validation\n\n  /**\n   * Validate the form!\n   * You can pass in callbacks as needed.\n   * Callbacks can be called \"before\" or \"after\" validation.\n   */\n  validate = (\n    callbacks?: ValidationCallback[]\n  ): Promise<ValidationError[]> | undefined => {\n    return _handleValidationEvent(\n      this,\n      this.required_fields,\n      this.field_names,\n      undefined,\n      callbacks\n    );\n  };\n\n  /**\n   * Validate the form!\n   * You can pass in callbacks as needed.\n   * Callbacks can be called \"before\" or \"after\" validation.\n   */\n  validateAsync = async (\n    callbacks?: ValidationCallback[]\n  ): Promise<ValidationError[] | undefined> => {\n    return await _handleValidationEvent(\n      this,\n      this.required_fields,\n      this.field_names,\n      undefined,\n      callbacks\n    );\n  };\n\n  /**\n   * If want to (in)validate a specific field for any reason.\n   */\n  validateField = (\n    field_name: string,\n    withMessage?: string,\n    callbacks?: ValidationCallback[]\n  ): void => {\n    const field = _get(field_name, this.fields);\n    if (!withMessage) {\n      _handleValidationEvent(\n        this,\n        this.required_fields,\n        this.field_names,\n        field,\n        callbacks\n      );\n    } else {\n      const err = new ValidationError(\n        field_name,\n        { error: withMessage },\n        { value: get(field.value) }\n      );\n      this.errors.push(err);\n      _linkAllErrors(this.errors, this.fields);\n    }\n  };\n\n  /**\n   * Can attach event listeners to one or more fields.\n   */\n  addEventListenerToFields = (\n    event: keyof HTMLElementEventMap,\n    callback: Callback,\n    field_names: string | string[]\n  ): void => {\n    if (Array.isArray(field_names)) {\n      const fields = field_names.map((f) => _get(f, this.fields));\n      fields.forEach((f) => {\n        _addCallbackToField(\n          this,\n          f,\n          event,\n          callback,\n          false,\n          this.required_fields,\n          this.field_names\n        );\n      });\n    } else {\n      const field = _get(field_names, this.fields);\n      _addCallbackToField(\n        this,\n        field,\n        event,\n        callback,\n        false,\n        this.required_fields,\n        this.field_names\n      );\n    }\n  };\n\n  /**\n   * Add your own callbacks to the normal _handleValidationEvent method.\n   */\n  addValidationCallbackToFields = (\n    event: keyof HTMLElementEventMap,\n    callbacks: ValidationCallback[],\n    field_names: string | string[]\n  ): void => {\n    if (Array.isArray(field_names)) {\n      const fields = field_names.map((f) => _get(f, this.fields));\n      fields.forEach((f) => {\n        _addCallbackToField(\n          this,\n          f,\n          event,\n          callbacks,\n          true,\n          this.required_fields,\n          this.field_names\n        );\n      });\n    } else {\n      const field = _get(field_names, this.fields);\n      _addCallbackToField(\n        this,\n        field,\n        event,\n        callbacks,\n        true,\n        this.required_fields,\n        this.field_names\n      );\n    }\n  };\n\n  //#endregion\n\n  //#region - Utility Methods\n\n  // Get Field by name\n  get = (field_name: string): FieldConfig => {\n    return _get(field_name, this.fields);\n  };\n\n  /**\n   * Generate a Svelte Store from the current \"this\".\n   */\n  storify = (): Writable<Form<ModelType>> => {\n    return writable(this);\n  };\n\n  // Clear ALL the errors.\n  clearErrors = (): void => {\n    this.errors = [];\n    this.fields.forEach((f) => {\n      f.errors.set(undefined);\n    });\n  };\n\n  /**\n   *! Make sure to call this when the component is unloaded/destroyed\n   * Removes all event listeners and clears the form state.\n   */\n  destroy = (): void => {\n    if (this.fields && this.fields.length > 0) {\n      // For each field...\n      this.fields.forEach((f) => {\n        // Remove all the event listeners!\n        Object.keys(this.on_events).forEach((key) => {\n          f.node &&\n            f.node.removeEventListener(key, (ev) => {\n              (e: Event) =>\n                _handleValidationEvent(\n                  this,\n                  this.required_fields,\n                  this.field_names,\n                  f\n                );\n            });\n        });\n        Object.keys(this.clear_errors_on_events).forEach((key) => {\n          f.node &&\n            f.node.removeEventListener(key, (e) => {\n              f.errors.set(undefined);\n            });\n        });\n      });\n    }\n  };\n\n  //#endregion\n\n  //#region - Form State\n\n  // Resets to the inital state of the form.\n  reset = (): void => {\n    _resetState(this, this.initial_state);\n  };\n\n  // Well, this updates the initial state of the form.\n  updateInitialState = (): void => {\n    _setInitialState(this, this.initial_state);\n    this.changed.set(false);\n  };\n\n  //#endregion\n\n  //#region - Styling\n\n  /**\n   * Set the field order.\n   * Layout param is simply an array of field (or group)\n   * names in the order to be displayed.\n   * Leftover fields are appended to bottom of form.\n   */\n  setFieldOrder = (order: string[]): void => {\n    if (order && order.length > 0) {\n      this.field_order = order;\n      this.fields = _createOrder(this.field_order, this.fields);\n    }\n  };\n\n  /**\n   * Hide a field or fields\n   * @param names? string | string[]\n   */\n  hideFields = (names?: string | string[]): void => {\n    if (names && this.hidden_fields) {\n      if (Array.isArray(names)) {\n        this.hidden_fields.push(...names);\n      } else {\n        this.hidden_fields.push(names);\n      }\n    }\n    if (this.hidden_fields)\n      _negateField(this.hidden_fields, this.field_names, this.fields, {\n        type: \"hide\",\n        value: true,\n      });\n  };\n\n  /**\n   * Show a field or fields\n   * @param names? string | string[]\n   */\n  showFields = (names?: string | string[]): void => {\n    if (names && this.hidden_fields) {\n      if (Array.isArray(names)) {\n        names.forEach((name) => {\n          if (this.hidden_fields)\n            this.hidden_fields.splice(this.hidden_fields.indexOf(name), 1);\n        });\n      } else {\n        this.hidden_fields.splice(this.hidden_fields.indexOf(names), 1);\n      }\n    }\n    if (this.hidden_fields)\n      _negateField(this.hidden_fields, this.field_names, this.fields, {\n        type: \"hide\",\n        value: false,\n      });\n  };\n\n  /**\n   * Disable a field or fields\n   * @param names? string | string[]\n   */\n  disableFields = (names?: string | string[]): void => {\n    if (names && this.disabled_fields) {\n      if (Array.isArray(names)) {\n        this.disabled_fields.push(...names);\n      } else {\n        this.disabled_fields.push(names);\n      }\n    }\n    if (this.disabled_fields)\n      _negateField(this.disabled_fields, this.field_names, this.fields, {\n        type: \"disable\",\n        value: true,\n      });\n  };\n\n  /**\n   * Enable a field or fields\n   * @param names? string | string[]\n   */\n  enableFields = (names?: string | string[]): void => {\n    if (names && this.disabled_fields) {\n      if (Array.isArray(names)) {\n        names.forEach((name) => {\n          if (this.disabled_fields)\n            this.disabled_fields.splice(this.disabled_fields.indexOf(name), 1);\n        });\n      } else {\n        this.disabled_fields.splice(this.disabled_fields.indexOf(names), 1);\n      }\n    }\n    if (this.disabled_fields)\n      _negateField(this.disabled_fields, this.field_names, this.fields, {\n        type: \"disable\",\n        value: false,\n      });\n  };\n\n  //#endregion\n\n  //#endregion ^^ Form API ^^\n}\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import \"reflect-metadata\";\nimport { FieldConfig } from \"./FieldConfig\";\n\nexport function field(config: Partial<FieldConfig>) {\n  return function (target: any, propertyKey: string) {\n    let properties: string[] =\n      Reflect.getMetadata(\"editableProperties\", target) || [];\n\n    if (properties.indexOf(propertyKey) < 0) {\n      properties.push(propertyKey);\n    }\n    Reflect.defineMetadata(\"editableProperties\", properties, target);\n\n    Reflect.defineMetadata(\"fieldConfig\", config, target, propertyKey);\n  };\n}\n\n// export function editable(target: any, propertyKey: string) {\n//   let properties: string[] =\n//     Reflect.getMetadata(\"editableProperties\", target) || [];\n\n//   if (properties.indexOf(propertyKey) < 0) {\n//     properties.push(propertyKey);\n//   }\n\n//   Reflect.defineMetadata(\"editableProperties\", properties, target);\n// }\n"],"names":["noop","get_store_value","store","value","callbacks","unsub","subscribe","unsubscribe","_","subscriber_queue","writable","start","stop","subscribers","set","new_value","b","a","run_queue","length","i","s","push","update","fn","run","invalidate","subscriber","index","indexOf","splice","FieldConfig","[object Object]","name","init","this","undefined","errors","clearErrors","Error","Object","assign","selector","template","attributes","type","options","label","ValidationError","model_property_key","property","constraints","k","OnEvents","disableAll","_get","fields","filter","f","_buildFormFields","model","props","Reflect","getMetadata","map","prop","field","_getRequiredFieldNames","required_field_names","forEach","required","_setValueChanges","changes","_changes","get","_attachEventListeners","on_events","callback","entries","eventName","shouldListen","node","addEventListener","e","_attachOnClearErrorEvents","clear_errors_on_events","_addCallbackToField","form","event","with_validation_event","required_fields","field_names","Array","isArray","_handleValidationEvent","_linkValues","fromFieldsToModel","len","val","_linkFieldErrors","filter_term","error","_linkAllErrors","err","_hanldeValueLinking","link_fields_to_model","_handleValidationCallbacks","when_to_call","cb","when","_executeCallbacks","validation_options","validator","value_changes","then","_handleFormValidation","hidden_fields","_negateField","disabled_fields","_hasStateChanged","changed","async","field_error_link_name","_requiredFieldsValid","valid","errs","keys","_setInitialState","initial_state","_resetState","_createOrder","field_order","newLayout","leftovers","_setFieldAttribute","setFieldProperty","key","affected_fields","negation","field_index","field_name","disabled","hidden","Form","skipMissingProperties","dismissDefaultMessages","validationError","target","forbidUnknownValues","stopAtFirstError","data","reinitialize","update_initial_state","buildFields","updateInitialState","refs","fields_with_ref_keys","ref_key","withMessage","removeEventListener","ev","order","names","setFieldOrder","attachRefData","config","propertyKey","properties","defineMetadata","factory","root","global","self","Function","exporter","makeExporter","previous","defineProperty","configurable","hasOwn","prototype","hasOwnProperty","supportsSymbol","Symbol","toPrimitiveSymbol","toPrimitive","iteratorSymbol","iterator","supportsCreate","create","supportsProto","__proto__","downLevel","HashMap","MakeDictionary","has","call","functionPrototype","getPrototypeOf","usePolyfill","process","env","_Map","Map","CreateMapPolyfill","_Set","Set","CreateSetPolyfill","Metadata","WeakMap","CreateWeakMapPolyfill","decorate","decorators","IsUndefined","IsArray","TypeError","IsConstructor","DecorateConstructor","IsObject","IsNull","DecorateProperty","ToPropertyKey","metadata","metadataKey","metadataValue","decorator","IsPropertyKey","OrdinaryDefineOwnMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","getMetadataKeys","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","delete","size","targetMetadata","decorated","descriptor","O","P","Create","MetadataKey","parent","OrdinaryGetPrototypeOf","ToBoolean","MetadataValue","ownKeys","parentKeys","_i","ownKeys_1","add","_a","parentKeys_1","GetIterator","next","IteratorStep","nextValue","IteratorValue","IteratorClose","Type","x","IsSymbol","ToPrimitive","input","PreferredType","hint","exoticToPrim","GetMethod","result","OrdinaryToPrimitive","toString_1","toString","IsCallable","valueOf","toString_2","argument","ToString","V","func","obj","method","iterResult","done","proto","prototypeProto","constructor","cacheSentinel","arraySentinel","MapIterator","values","_index","_keys","_values","_selector","throw","return","_cacheKey","_cacheIndex","enumerable","_find","clear","getKey","getValue","getEntry","insert","_map","UUID_SIZE","rootKey","CreateUniqueKey","_key","table","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","buffer","Math","random","GenRandomBytes","Uint8Array","crypto","getRandomValues","msCrypto","offset","byte","toLowerCase","__"],"mappings":"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"}