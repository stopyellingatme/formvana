{"version":3,"file":"index.mjs","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","core/FieldConfig.ts","core/internal.ts","core/formHelpers.ts","core/Form.ts","../node_modules/reflect-metadata/Reflect.js","core/decorators.ts","core/FormManager.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { SvelteComponent } from \"svelte\";\nimport { get, writable, Writable } from \"svelte/store\";\nimport {\n  Callback,\n  FieldAttributes,\n  RefDataItem,\n  ValidationCallback,\n  ValidationError,\n} from \"./internal\";\n\n/**\n * FieldConfig is used to help with the form auto generation functionality.\n *\n * This is not meant to be a complete HTML Input/Select/etc replacement.\n * It is simply a vehicle to help give the form generator\n * an easy-to-use format to work with.\n */\nexport class FieldConfig<T extends Object> {\n  constructor(name: keyof T, init?: Partial<FieldConfig<T>>) {\n    if (name) {\n      this.name = name;\n    } else {\n      throw new Error(\n        \"{name: string} is required for FieldConfig intialization.\"\n      );\n    }\n\n    /** I know, Object.assign... lots of freedom there. */\n    if (init) Object.assign(this, init);\n\n    if (!this.selector) {\n      throw new Error(\n        `Please pass in a valid Element.\\nEither a string selector or a SvelteComponent.`\n      );\n    }\n\n    /** Check if the value is still a Writable store */\n    if (!this.value || !(<Writable<any>>this.value).subscribe) {\n      /** If it's not, make it a writable store. */\n      this.value = writable(this.value);\n    }\n\n    /**  Set the type attribute if it's not already set */\n    if (this.attributes && !this.attributes[\"type\"]) {\n      this.attributes[\"type\"] = this.type;\n    } else if (!this.attributes) {\n      this.attributes = {};\n      this.attributes[\"type\"] = this.type;\n    }\n\n    /**\n     * Trying to set some sane defaults when initializing field.\n     * These can be over-written easily by simply adding a value to your\n     * class field.\n     * E.g. class YourClass{ description: string = \"This is a descriptor.\" }\n     * The text \"This is a descriptor.\" will be linked to the FieldConfig.value\n     * when the fields are built from the model (in Form.buildFields();)\n     */\n    switch (this.type) {\n      case \"text\" || \"email\" || \"password\" || \"string\":\n        this.value.set(\"\");\n        break;\n      case \"decimal\" || \"double\":\n        this.value.set(0.0);\n        break;\n      case \"number\" || \"int\" || \"integer\":\n        this.value.set(0);\n        break;\n      case \"boolean\" || \"choice\" || \"radio\" || \"checkbox\":\n        this.value.set(false);\n        this.options = [];\n        break;\n      case \"select\" || \"dropdown\":\n        this.options = [];\n        break;\n      default:\n        this.value.set(undefined);\n        break;\n    }\n\n    /**\n     * I'm doing this because there's not enough thought about accessibility\n     * in Forms or for libraries. Better to have SOME kind of default than none\n     * at all.\n     * So, if there's no aria-label and the title attribute is present...\n     */\n    if (!this.attributes[\"aria-label\"] && this.attributes[\"title\"]) {\n      /** Set aria-label = title */\n      this.attributes[\"aria-label\"] = this.attributes[\"title\"];\n    } else if (!this.attributes[\"aria-label\"]) {\n      /** If no aria-label then set it to the label or if !label then name */\n      this.attributes[\"aria-label\"] = this.label || this.name;\n    }\n  }\n\n  /**\n   * Name of the class property.\n   * Only set \"name\" if you are using FieldConfig apart from\n   * your object/model.\n   * I.e. you are using plain JSON rather than a TS class.\n   */\n  readonly name: keyof T;\n\n  /**\n   * HTML Element which the field is attached to.\n   * Attached using the form.useField method.\n   */\n  node?: HTMLElement;\n\n  /**\n   * el can be either String or Svelte Component.\n   * This allows us a more flexible dynamic field generator.\n   * Using a template also allows you to style each input as needed.\n   */\n  selector?: string | SvelteComponent;\n\n  /** Value is a writable store defaulting to undefined. */\n  value: Writable<any> = writable(undefined);\n  /** Defaults to text, can be set to anything though. */\n  type: string = \"text\";\n  required?: boolean;\n\n  label?: string;\n  hint?: string | string[];\n\n  /**\n   * Validation Errors!\n   * We're mainly looking for the \"constraints\".\n   * One ValidationError object can have multiple errors (constraints)\n   */\n  errors: Writable<ValidationError | undefined> = writable(undefined);\n\n  /**\n   * Use styles and classes to apply styling.\n   * However, using a template/component is recommended.\n   */\n  styles?: string;\n  classes?: string;\n\n  /** Linked to form.refs via RefData[ref_key] */\n  ref_key?: string;\n  /** Used if there is a set of \"options\" to choose from. */\n  options?: RefDataItem[];\n\n  /** Pretty self-explainitory, disable the field. */\n  disabled?: boolean;\n  /** Pretty self-explainitory, hide the field. */\n  hidden?: boolean;\n\n  /**\n   * Attributes uses a fairly exhaustive map of most HTML Field-ish\n   * attributes.\n   * You also have the option to use a plain JSON Object, for\n   * extra flexibility.\n   *\n   * @example attrubutes[\"description\"] is ok without being a FieldAttribute\n   */\n  attributes?: Partial<FieldAttributes> | Record<string | number | symbol, any>;\n  /** Element.dataset hook, so you can do the really wild things! */\n  data_set?: string[];\n\n  /** In case you'd like to filter some fields for a specific form */\n  for_form?: string | string[];\n\n  /**\n   * If you're using a validation library that supports\n   * a validation rules, validation pattern.\n   */\n  validation_rules?: Object;\n\n  /**\n   * Group is optional.\n   * Use when you'd like to group multiple fields togethter.\n   */\n  group?: string | string[];\n  /**\n   * Step is used when field is part of a multi-step form.\n   */\n  step?: number | string;\n\n  private clearErrors = (): void => {\n    this.errors.set(undefined);\n  };\n\n  clear = (): void | undefined => {\n    this.clearErrors();\n  };\n\n  addEventListener = (\n    event: keyof HTMLElementEventMap,\n    callback: ValidationCallback | Callback\n  ) => {\n    if (this.node) {\n      this.node.addEventListener(\n        event,\n        /** Check if the callback is directly executable */\n        (e) => (callback instanceof Function ? callback(e) : callback),\n        /** No extra options being passed in */\n        false\n      );\n    } else {\n      throw new Error(\n        \"Node is missing! No Html Node to attach event listener too!\"\n      );\n    }\n  };\n}\n\ntype FieldDictionary = Array<FieldConfig<Object>>;\n\nexport class FieldStepper {\n  constructor(fields: FieldDictionary, active_index?: keyof FieldDictionary) {\n    this.fields = fields;\n\n    if (active_index) {\n      this.active_step = active_index;\n    } else {\n      /** Get the first set, and set the active_index */\n      let k: keyof FieldDictionary,\n        first = true;\n      for (k in fields) {\n        if (first) this.active_step = k;\n      }\n    }\n  }\n\n  fields: FieldDictionary;\n\n  active_step: keyof FieldDictionary | undefined;\n\n  public get fields_valid(): Writable<boolean> {\n    let valid = true,\n      k: keyof FieldDictionary;\n    for (k in this.fields) {\n      /** If there's an error, set valid to false. */\n      if (get(this.fields[k].errors)) {\n        valid = false;\n      }\n    }\n    return writable(valid);\n  }\n}\n","// #region Validation\n\n/** Using \"when\" gives us a little more flexibilty. */\nexport interface ValidationCallback {\n  callback: Callback;\n  /**\n   * When should the callback fire?\n   * \"before\" or \"after\" validation?\n   */\n  when: \"before\" | \"after\";\n}\n\n/** Pretty much any funciton as long as it returns a Promise with\n * Validation Error array.\n */\nexport type ValidatorFunction = (...args: any[]) => Promise<ValidationError[]>;\n\n/**\n * @param model_property_key, which model field are we linking this to?\n * @param errors essentially Record<string #1, string #2>\n * with #1 being the name of the error (minlength, pattern)\n * and #2 being the error message\n * @param options, anything else part of the ValidationErrorType\n */\nexport class ValidationError implements ValidationErrorType {\n  constructor(\n    model_property_key?: string,\n    errors?: { [type: string]: string },\n    options?: Partial<ValidationErrorType>\n  ) {\n    if (model_property_key) this.property = model_property_key;\n    if (errors) {\n      this.constraints = errors;\n    }\n    if (options) {\n      let k: keyof typeof options;\n      for (k in options) {\n        this[k] = options[k];\n      }\n    }\n  }\n\n  target?: Object; // Object that was validated.\n  property?: string; // Object's property that didn't pass validation.\n  value?: any; // Value that didn't pass a validation.\n  constraints?: {\n    // Constraints that failed validation with error messages.\n    [type: string]: string;\n  };\n  children?: ValidationErrorType[];\n}\n\nexport interface ValidationErrorType {\n  target?: Object; // Object that was validated.\n  property?: string; // Object's property that didn't pass validation.\n  value?: any; // Value that didn't pass a validation.\n  constraints?: {\n    // Constraints that failed validation with error messages.\n    [type: string]: string;\n  };\n  children?: ValidationErrorType[];\n}\n\n/** Form Validation Options  */\nexport interface ValidationOptions {\n  /**\n   * PLEASE PASS IN A VALIDATOR FUNCTION!\n   *\n   * This is the (validation) function that will be called when validating.\n   * You can use any validation library you like, as long as this function\n   * returns Promise<ValidationError[]>\n   */\n  validator: ValidatorFunction;\n  /**\n   * Validation options come from class-validator ClassValidatorOptions.\n   *\n   * Biggest perf increase comes from setting validationError.target = false\n   * (so the whole model is not attached to each error message)\n   */\n  options?: Partial<ClassValidatorOptions>;\n\n  /**\n   * Optional validation schema.\n   * \"no-class\" method of validating the model.\n   *\n   * @TODO Create a way to validate JSON model\n   */\n  schema?: Object;\n  /**\n   * Name of the property which links ERRORS to fields.\n   * Error.property_or_name_or_whatever must match field.name.\n   */\n  field_error_link_name: ValidationError[\"property\"];\n\n  /** When to link this.field values to this.model values */\n  link_fields_to_model?: LinkOnEvent;\n\n  /**\n   * Which events should the form do things on?\n   * @examples validate, link values, hide/disable fields, callbacks\n   */\n  on_events: OnEvents<HTMLElementEventMap>;\n}\n\n/**\n * Options passed to validator during validation.\n * Note: this interface used by class-validator\n */\nexport interface ClassValidatorOptions extends Record<string, unknown> {\n  /**\n   * If set to true then class-validator will print extra warning messages to the console when something is not right.\n   */\n  enableDebugMessages?: boolean;\n  /**\n   * If set to true then validator will skip validation of all properties that are undefined in the validating object.\n   */\n  skipUndefinedProperties?: boolean;\n  /**\n   * If set to true then validator will skip validation of all properties that are null in the validating object.\n   */\n  skipNullProperties?: boolean;\n  /**\n   * If set to true then validator will skip validation of all properties that are null or undefined in the validating object.\n   */\n  skipMissingProperties?: boolean;\n  /**\n   * If set to true validator will strip validated object of any properties that do not have any decorators.\n   *\n   * Tip: if no other decorator is suitable for your property use @Allow decorator.\n   */\n  whitelist?: boolean;\n  /**\n   * If set to true, instead of stripping non-whitelisted properties validator will throw an error\n   */\n  forbidNonWhitelisted?: boolean;\n  /**\n   * Groups to be used during validation of the object.\n   */\n  groups?: string[];\n  /**\n   * Set default for `always` option of decorators. Default can be overridden in decorator options.\n   */\n  always?: boolean;\n  /**\n   * If [groups]{@link ClassValidatorOptions#groups} is not given or is empty,\n   * ignore decorators with at least one group.\n   */\n  strictGroups?: boolean;\n  /**\n   * If set to true, the validation will not use default messages.\n   * Error message always will be undefined if its not explicitly set.\n   */\n  dismissDefaultMessages?: boolean;\n  /**\n   * ValidationError special options.\n   */\n  validationError?: {\n    /**\n     * Indicates if target should be exposed in ValidationError.\n     */\n    target?: boolean;\n    /**\n     * Indicates if validated value should be exposed in ValidationError.\n     */\n    value?: boolean;\n  };\n  /**\n   * Settings true will cause fail validation of unknown objects.\n   */\n  forbidUnknownValues?: boolean;\n  /**\n   * When set to true, validation of the given property will stop after encountering the first error. Defaults to false.\n   */\n  stopAtFirstError?: boolean;\n}\n\n//#endregion\n\n// #region Events\n/**\n * Determines which events to validate on.\n * You can insert event listeners just by adding a [string]: boolean\n * to the constructor's init object.\n * Enabled By Default: blue, change, focus, input, submit\n */\nexport class OnEvents<T extends HTMLElementEventMap> {\n  constructor(init?: Partial<OnEvents<T>>, disableAll: boolean = false) {\n    // If disableAll is false, turn off all event listeners\n    if (disableAll) {\n      let k: keyof OnEvents<T> | string;\n      for (k in this) {\n        this[k as keyof OnEvents<T>] = false;\n      }\n    }\n    Object.assign(this, init);\n  }\n\n  blur: boolean = true;\n  change: boolean = true;\n  click: boolean = false;\n  dblclick: boolean = false;\n  focus: boolean = true;\n  input: boolean = true;\n  keydown: boolean = false;\n  keypress: boolean = false;\n  keyup: boolean = false;\n  mount: boolean = false;\n  mousedown: boolean = false;\n  mouseenter: boolean = false;\n  mouseleave: boolean = false;\n  mousemove: boolean = false;\n  mouseout: boolean = false;\n  mouseover: boolean = false;\n  mouseup: boolean = false;\n  submit: boolean = true;\n}\n\n/**\n * Should we link the values always?\n * Or only if the form is valid?\n */\nexport type LinkOnEvent = \"always\" | \"valid\";\n\nexport type LinkValuesOnEvent = \"all\" | \"field\";\n\n//#endregion\n\n// #region Misc\n\n/**\n * Keeping it simple. Just keep up with model and errors.\n */\nexport type InitialFormState<ModelType extends Object> = {\n  model: ModelType | undefined;\n  errors: ValidationError[] | undefined;\n};\n\n/**\n * Data format for the reference data items\n * Form.refs are of type Record<string, RefDataItem[]>\n */\nexport interface RefDataItem {\n  label: string;\n  value: any;\n  data?: any;\n}\n\n/** Helpful shape for loading in reference data for the Form */\nexport type RefData = Record<string, RefDataItem[]>;\n\n/** This gives us a pretty exhaustive typesafe map of element attributes */\nexport type FieldAttributes = Record<ElementAttributesMap & string, any>;\n\nexport type ElementAttributesMap =\n  | keyof HTMLElement\n  | keyof HTMLInputElement\n  | keyof HTMLSelectElement\n  | keyof HTMLFieldSetElement\n  | keyof HTMLImageElement\n  | keyof HTMLButtonElement\n  | keyof HTMLCanvasElement\n  | keyof HTMLOptionElement\n  | keyof AriaAttributes;\n\n/** Catchall type for giving callbacks a bit more typesafety */\nexport type Callback =\n  | ((...args: any[]) => any)\n  | (() => any)\n  | void\n  | undefined\n  | boolean\n  | string\n  | Promise<any>;\n\n/**\n * All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n * This is here because there is no AriaAttrubutes type in the default library.\n */\ninterface AriaAttributes {\n  /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n  \"aria-activedescendant\"?: string;\n  /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n  \"aria-atomic\"?: boolean | \"false\" | \"true\";\n  /**\n   * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n   * presented if they are made.\n   */\n  \"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\";\n  /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n  \"aria-busy\"?: boolean | \"false\" | \"true\";\n  /**\n   * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n   * @see aria-pressed @see aria-selected.\n   */\n  \"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\";\n  /**\n   * Defines the total number of columns in a table, grid, or treegrid.\n   * @see aria-colindex.\n   */\n  \"aria-colcount\"?: number;\n  /**\n   * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n   * @see aria-colcount @see aria-colspan.\n   */\n  \"aria-colindex\"?: number;\n  /**\n   * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n   * @see aria-colindex @see aria-rowspan.\n   */\n  \"aria-colspan\"?: number;\n  /**\n   * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n   * @see aria-owns.\n   */\n  \"aria-controls\"?: string;\n  /** Indicates the element that represents the current item within a container or set of related elements. */\n  \"aria-current\"?:\n    | boolean\n    | \"false\"\n    | \"true\"\n    | \"page\"\n    | \"step\"\n    | \"location\"\n    | \"date\"\n    | \"time\";\n  /**\n   * Identifies the element (or elements) that describes the object.\n   * @see aria-labelledby\n   */\n  \"aria-describedby\"?: string;\n  /**\n   * Identifies the element that provides a detailed, extended description for the object.\n   * @see aria-describedby.\n   */\n  \"aria-details\"?: string;\n  /**\n   * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n   * @see aria-hidden @see aria-readonly.\n   */\n  \"aria-disabled\"?: boolean | \"false\" | \"true\";\n  /**\n   * Indicates what functions can be performed when a dragged object is released on the drop target.\n   * @deprecated in ARIA 1.1\n   */\n  \"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\";\n  /**\n   * Identifies the element that provides an error message for the object.\n   * @see aria-invalid @see aria-describedby.\n   */\n  \"aria-errormessage\"?: string;\n  /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n  \"aria-expanded\"?: boolean | \"false\" | \"true\";\n  /**\n   * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n   * allows assistive technology to override the general default of reading in document source order.\n   */\n  \"aria-flowto\"?: string;\n  /**\n   * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n   * @deprecated in ARIA 1.1\n   */\n  \"aria-grabbed\"?: boolean | \"false\" | \"true\";\n  /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n  \"aria-haspopup\"?:\n    | boolean\n    | \"false\"\n    | \"true\"\n    | \"menu\"\n    | \"listbox\"\n    | \"tree\"\n    | \"grid\"\n    | \"dialog\";\n  /**\n   * Indicates whether the element is exposed to an accessibility API.\n   * @see aria-disabled.\n   */\n  \"aria-hidden\"?: boolean | \"false\" | \"true\";\n  /**\n   * Indicates the entered value does not conform to the format expected by the application.\n   * @see aria-errormessage.\n   */\n  \"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\";\n  /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n  \"aria-keyshortcuts\"?: string;\n  /**\n   * Defines a string value that labels the current element.\n   * @see aria-labelledby.\n   */\n  \"aria-label\"?: string;\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see aria-describedby.\n   */\n  \"aria-labelledby\"?: string;\n  /** Defines the hierarchical level of an element within a structure. */\n  \"aria-level\"?: number;\n  /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n  \"aria-live\"?: \"off\" | \"assertive\" | \"polite\";\n  /** Indicates whether an element is modal when displayed. */\n  \"aria-modal\"?: boolean | \"false\" | \"true\";\n  /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n  \"aria-multiline\"?: boolean | \"false\" | \"true\";\n  /** Indicates that the user may select more than one item from the current selectable descendants. */\n  \"aria-multiselectable\"?: boolean | \"false\" | \"true\";\n  /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n  \"aria-orientation\"?: \"horizontal\" | \"vertical\";\n  /**\n   * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n   * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n   * @see aria-controls.\n   */\n  \"aria-owns\"?: string;\n  /**\n   * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n   * A hint could be a sample value or a brief description of the expected format.\n   */\n  \"aria-placeholder\"?: string;\n  /**\n   * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n   * @see aria-setsize.\n   */\n  \"aria-posinset\"?: number;\n  /**\n   * Indicates the current \"pressed\" state of toggle buttons.\n   * @see aria-checked @see aria-selected.\n   */\n  \"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\";\n  /**\n   * Indicates that the element is not editable, but is otherwise operable.\n   * @see aria-disabled.\n   */\n  \"aria-readonly\"?: boolean | \"false\" | \"true\";\n  /**\n   * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n   * @see aria-atomic.\n   */\n  \"aria-relevant\"?:\n    | \"additions\"\n    | \"additions removals\"\n    | \"additions text\"\n    | \"all\"\n    | \"removals\"\n    | \"removals additions\"\n    | \"removals text\"\n    | \"text\"\n    | \"text additions\"\n    | \"text removals\";\n  /** Indicates that user input is required on the element before a form may be submitted. */\n  \"aria-required\"?: boolean | \"false\" | \"true\";\n  /** Defines a human-readable, author-localized description for the role of an element. */\n  \"aria-roledescription\"?: string;\n  /**\n   * Defines the total number of rows in a table, grid, or treegrid.\n   * @see aria-rowindex.\n   */\n  \"aria-rowcount\"?: number;\n  /**\n   * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n   * @see aria-rowcount @see aria-rowspan.\n   */\n  \"aria-rowindex\"?: number;\n  /**\n   * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n   * @see aria-rowindex @see aria-colspan.\n   */\n  \"aria-rowspan\"?: number;\n  /**\n   * Indicates the current \"selected\" state of various widgets.\n   * @see aria-checked @see aria-pressed.\n   */\n  \"aria-selected\"?: boolean | \"false\" | \"true\";\n  /**\n   * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n   * @see aria-posinset.\n   */\n  \"aria-setsize\"?: number;\n  /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n  \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\";\n  /** Defines the maximum allowed value for a range widget. */\n  \"aria-valuemax\"?: number;\n  /** Defines the minimum allowed value for a range widget. */\n  \"aria-valuemin\"?: number;\n  /**\n   * Defines the current value for a range widget.\n   * @see aria-valuetext.\n   */\n  \"aria-valuenow\"?: number;\n  /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n  \"aria-valuetext\"?: string;\n}\n\n//#endregion\n","import { get, Writable } from \"svelte/store\";\nimport { FieldConfig } from \"./FieldConfig\";\nimport { Form } from \"./Form\";\nimport {\n  Callback,\n  OnEvents,\n  ValidationCallback,\n  ValidationError,\n  InitialFormState,\n  LinkOnEvent,\n} from \"./internal\";\n\n// #region Utility Functions\n\n/**\n * Build the field configs from this.model using metadata-reflection.\n * Grab the editableProperties from the @field decorator.\n *\n * @TODO Create method to use plain JSON as model, fields and validation schema\n */\nexport function _buildFormFields<T extends Object>(\n  model: T,\n  meta?: Record<string, string | number | boolean | Object>,\n  props: string[] = Reflect.getMetadata(\"editableProperties\", model)\n): FieldConfig<T>[] {\n  /** Map the @field fields to the form.fields */\n  const fields = props.map((prop: string) => {\n    /** Get the @FieldConfig using metadata reflection */\n    const field: FieldConfig<T> = new FieldConfig<T>(prop as keyof T, {\n      ...Reflect.getMetadata(\"fieldConfig\", model, prop),\n      value: model[prop as keyof T],\n    });\n\n    /** We made it. Return the field config and let's generate some inputs! */\n    return field;\n  });\n\n  if (meta) {\n    /** Filter fields used in a specific form */\n    fields.filter((f) => meta[\"name\"] === f.for_form);\n  }\n\n  return fields;\n}\n\n/** Get the form field by name */\nexport function _get<T extends Object>(\n  name: keyof T,\n  fields: FieldConfig<T>[]\n): FieldConfig<T> {\n  return fields.filter((f) => f.name === name)[0];\n}\n\n//#endregion\n\n// #region HTML Event Helpers\n\n/**\n * Attach the OnEvents events to each form.field.\n * Parent: form.useField(...)\n */\nexport function _attachEventListeners<T extends Object>(\n  field: FieldConfig<T>,\n  on_events: OnEvents<HTMLElementEventMap>,\n  callback: Callback\n): void {\n  Object.entries(on_events).forEach(([eventName, shouldListen]) => {\n    /** If shouldListen true, then add the event listener */\n    if (shouldListen) {\n      if (field.node?.nodeName === \"SELECT\" && eventName !== \"input\") {\n        field.addEventListener(\n          eventName as keyof HTMLElementEventMap,\n          callback\n        );\n      }\n\n      if (field.node?.nodeName !== \"SELECT\") {\n        field.addEventListener(\n          eventName as keyof HTMLElementEventMap,\n          callback\n        );\n      }\n    }\n  });\n}\n\nexport function _addCallbackToField<T extends Object>(\n  form: Form<T>,\n  field: FieldConfig<T>,\n  event: keyof HTMLElementEventMap,\n  callback: ValidationCallback | Callback,\n  required_fields: Array<keyof T>\n): void {\n  /** Check if callback is of type ValidationCallback */\n  if (callback && (<ValidationCallback>callback).when) {\n    field.addEventListener(\n      event,\n      _executeValidationEvent(form, required_fields, undefined, [\n        <ValidationCallback>callback,\n      ])\n    );\n  } else {\n    field.addEventListener(event, <Callback>callback);\n  }\n}\n\n//#endregion\n\n// #region Linking Utilities\n\n/**\n * Link values from FIELDS to MODEL or MODEL to FIELDS\n * @Hotpath\n */\nexport function _linkValues<T extends Object>(\n  from_fields_to_model: boolean,\n  fields: FieldConfig<T>[],\n  model: T\n): void {\n  /** Still the fastest way i've seen to loop in JS. */\n  let i = 0,\n    len = fields.length;\n  for (; len > i; ++i) {\n    /** Get name and value of the field */\n    const name = fields[i].name,\n      val = fields[i].value;\n    /**  Link field[values] to model[values] */\n    if (from_fields_to_model) {\n      model[name as keyof T] = get(val);\n    } else {\n      /**  Link form.model[values] to the form.fields[values] */\n      val.set(model[name as keyof T]);\n    }\n  }\n}\n\n/**\n * Link form.errors to it's corresponding field.errors\n * Via error[field_name]\n *\n * @Hotpath\n */\nexport function _linkFieldErrors<T extends Object>(\n  errors: ValidationError[],\n  field: FieldConfig<T>,\n  field_name: ValidationError[\"property\"]\n): void {\n  const error = errors.filter(\n    (e) => e[field_name as keyof ValidationError] === field.name\n  );\n  // Check if there's an error for the field\n  if (error && error.length > 0) {\n    field.errors.set(error[0]);\n  } else {\n    /**  Very important! Don't change! */\n    field.errors.set(undefined);\n  }\n}\n\n/**\n * Link all Validation Errors on Form.errors to each field via the\n * field_error_link_name.\n *\n * @Hotpath\n */\nexport function _linkAllErrors<T extends Object>(\n  errors: ValidationError[],\n  fields: FieldConfig<T>[],\n  field_error_link_name: ValidationError[\"property\"]\n): void {\n  errors.forEach((err) => {\n    let k: keyof typeof err;\n    for (k in err) {\n      if (k === field_error_link_name) {\n        const f = _get(err[field_error_link_name], fields);\n        f.errors.set(err);\n      }\n    }\n  });\n}\n\n/** When should we link the fields to the model?\n * \"alwyas\" || \"valid\" (when valid)\n *\n * @Hotpath\n */\nexport function _hanldeValueLinking<T extends Object>(\n  model: T,\n  fields: FieldConfig<T>[],\n  link_fields_to_model: LinkOnEvent | undefined\n): void {\n  /**\n   * Link the input from the field to the model.\n   * We dont't link (just) the field value.\n   * We link all values just in case the field change propigates\n   * to other field changes.\n   */\n  if (link_fields_to_model === \"always\") {\n    _linkValues(true, fields, model);\n  } else if (link_fields_to_model === \"valid\") {\n    _linkValues(true, fields, model);\n  }\n}\n\n//#endregion\n\n// #region Validation Helpers\n\n/**\n * Hanlde the events that will fire for each field.\n * Corresponds to the form.on_events field.\n *\n * @Hotpath\n */\nexport function _executeValidationEvent<T extends Object>(\n  form: Form<T>,\n  required_fields: Array<keyof T>,\n  field?: FieldConfig<T>,\n  callbacks?: ValidationCallback[]\n): Promise<ValidationError[]> | undefined {\n  /** The form has been altered (no longer pristine) */\n  form.pristine.set(false);\n\n  /** Execute pre-validation callbacks */\n  _executeCallbacks([\n    /**\n     * Link new data from field to the model.\n     * We are not linking (only/just) the field value.\n     * We link all values just in case the field change propigates other field changes.\n     * I've tried an approach that linked ONLY data to single field, negligable perf hit\n     */\n    _hanldeValueLinking(\n      form.model,\n      form.fields,\n      form.validation_options.link_fields_to_model\n    ),\n    /** Execution step may need work */\n    field && _setValueChanges(form.value_changes, field),\n    callbacks && _executeValidationCallbacks(\"before\", callbacks),\n  ]);\n\n  return form.validation_options\n    .validator(form.model, form.validation_options.options)\n    .then((errors: ValidationError[]) => {\n      _executeCallbacks([\n        _handleValidationSideEffects(form, errors, required_fields, field),\n        _hasStateChanged(form.value_changes, form.changed),\n        callbacks && _executeValidationCallbacks(\"after\", callbacks),\n      ]);\n      return errors;\n    });\n}\n\n/**\n * Execute validation callbacks, depending on when_to_call\n * @Hotpath\n */\nfunction _executeValidationCallbacks(\n  when_to_call: \"before\" | \"after\",\n  callbacks: ValidationCallback[]\n): void {\n  if (callbacks && callbacks.length > 0)\n    callbacks.forEach((cb) => {\n      if (cb.when === when_to_call) {\n        _callFunction(cb.callback);\n      }\n    });\n}\n\n/**\n * Check if the callback is a function and execute it accordingly\n * @Hotpath\n */\nfunction _callFunction(cb: Callback) {\n  if (cb instanceof Function) {\n    cb();\n  } else {\n    () => cb;\n  }\n}\n\n/**\n * This is used to add functions and callbacks to the OnEvent\n * handler. Functions can be added in a plugin-style manner now.\n *\n * @Hotpath\n */\nexport function _executeCallbacks(callbacks: Callback | Callback[]): void {\n  /** Is it an Array of callbacks? */\n  if (Array.isArray(callbacks)) {\n    callbacks.forEach((cb) => {\n      _callFunction(cb);\n    });\n  } else {\n    _callFunction(callbacks);\n  }\n}\n\n/**\n * Handle all the things associated with validation!\n * Link the errors to the fields.\n * Check if all required fields are valid.\n * Link values from fields to model if\n * form.link_fields_to_model === LinkOnEvent.Valid is true.\n *\n * @Hotpath\n */\nexport async function _handleValidationSideEffects<T extends Object>(\n  form: Form<T>,\n  errors: ValidationError[],\n  required_fields: Array<keyof T>,\n  field?: FieldConfig<T>\n): Promise<ValidationError[]> {\n  /**  There are errors! */\n  if (errors && errors.length > 0) {\n    form.errors = errors;\n\n    /**  Are we validating the whole form or just the fields? */\n    if (field) {\n      /**  Link errors to field (to show validation errors) */\n      if (form.validation_options.field_error_link_name) {\n        _linkFieldErrors(\n          errors,\n          field,\n          form.validation_options.field_error_link_name\n        );\n      }\n    } else {\n      /**  This is validatino for the whole form! */\n      _linkAllErrors(\n        errors,\n        form.fields,\n        form.validation_options.field_error_link_name\n      );\n    }\n\n    /**  All required fields are valid? */\n    if (_requiredFieldsValid(errors, required_fields)) {\n      form.valid.set(true);\n    } else {\n      form.valid.set(false);\n    }\n  } else {\n    /** We can't get here unless the errors we see are for non-required fields */\n\n    /**\n     * If the config tells us to link the values only when the form\n     * is valid, then link them here.\n     */\n    _hanldeValueLinking(\n      form.model,\n      form.fields,\n      form.validation_options.link_fields_to_model\n    );\n    form.clearErrors(); /** Clear form errors */\n    form.valid.set(true); /** Form is valid! */\n  }\n  return errors;\n}\n\n/**\n * @TODO Clean up this requiredFieldsValid implementation. Seems too clunky.\n *\n * Check if there are any required fields in the errors.\n * If there are no required fields in the errors, the form is valid.\n *\n * @Hotpath\n */\nexport function _requiredFieldsValid<T extends Object>(\n  errors: ValidationError[],\n  required_fields: Array<keyof T>\n): boolean {\n  if (errors.length === 0) return true;\n  // Go ahead and return if there are no errors\n  let i = 0,\n    len = required_fields.length;\n  // If there are no required fields, just go ahead and return\n  if (len === 0) return true;\n  /**\n   * Otherwise we have to map the names of the errors so we can\n   * check if they're for a required field\n   */\n  const errs = errors.map((e) => e.property);\n  for (; len > i; ++i) {\n    if (errs.indexOf(required_fields[i] as keyof ValidationError) !== -1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n//#endregion\n\n// #region Form State\n\n/**\n * Helper function for value_change emitter.\n * Write the form's value changes to form.value_changes.\n *\n * @Hotpath\n *\n * @param changes incoming value changes\n * @param field field emitting the changes\n */\nexport function _setValueChanges<T extends Object>(\n  changes: Writable<Record<keyof T | any, T[keyof T]>>,\n  field: FieldConfig<T>\n): void {\n  const _changes = get(changes);\n\n  /** Is the change is on the same field? */\n  if (_changes[field.name]) {\n    _changes[field.name] = get(field.value);\n    changes.set({ ..._changes });\n  } else {\n    /** Or is the change on a different field? */\n    changes.set({ ..._changes, [field.name]: get(field.value) });\n  }\n}\n\n/**\n * Is the current form state different than the initial state?\n *\n * I've tested it with ~ 1000 fields in a single class with very slight input lag.\n *\n * @Hotpath\n */\nexport function _hasStateChanged(\n  value_changes: Writable<Record<string, any>>,\n  changed: Writable<boolean>\n): void {\n  // const changes = get(value_changes) !== {} ? get(value_changes) : null;\n  const changes = get(value_changes);\n\n  if (changes && changes !== {} && Object.keys(changes).length > 0) {\n    changed.set(true);\n    return;\n  }\n  changed.set(false);\n}\n\n/**\n * Grab a snapshot of several items that generally define the state of the form\n * and serialize them into a format that's easy-ish to check/deserialize (for resetting)\n */\nexport function _setInitialState<T extends Object>(\n  form: Form<T>,\n  initial_state: InitialFormState<T>\n): InitialFormState<T> {\n  initial_state.model = Object.assign({}, form.model);\n\n  if (form.errors && form.errors.length > 0) {\n    initial_state.errors = [...form.errors];\n  } else {\n    initial_state.errors = [];\n  }\n  return initial_state;\n}\n\n/**\n * Reset form to inital state.\n */\nexport function _resetState<T extends Object>(\n  form: Form<T>,\n  initial_state: InitialFormState<T>\n): void {\n  /** !CANNOT OVERWRITE MODEL. VALIDATION GETS FUCKED UP! */\n  let k: keyof T;\n  if (initial_state.model) {\n    for (k in initial_state.model) {\n      form.model[k] = initial_state.model[k];\n    }\n  }\n\n  /** Clear the form errors before assigning initial_state.errors */\n  form.clearErrors();\n  if (initial_state.errors && initial_state.errors.length > 0) {\n    form.errors = [...initial_state.errors];\n  } else {\n    form.errors = [];\n  }\n  /** Done serializing the initial_state */\n\n  /** Link the values, now */\n  _linkValues(false, form.fields, form.model);\n\n  /** If there were errors in the inital_state\n   *  link them to each field\n   */\n  if (form.errors && form.errors.length > 0) {\n    _linkAllErrors(\n      form.errors,\n      form.fields,\n      form.validation_options.field_error_link_name\n    );\n  }\n  /** Reset the value changes and the \"changed\" store */\n  form.value_changes.set({});\n  form.changed.set(false);\n}\n\n//#endregion\n\n// #region Styling\n\n/**\n * Using this.field_order, rearrange the order of the fields.\n */\nexport function _setFieldOrder<T extends Object>(\n  field_order: Array<keyof T>,\n  fields: FieldConfig<T>[]\n): FieldConfig<T>[] {\n  let newLayout: FieldConfig<T>[] = [];\n  let leftovers: FieldConfig<T>[] = [];\n  /** Loop over the order... */\n  field_order.forEach((name) => {\n    const field = _get(name, fields);\n    /** If the field.name and the order name match... */\n    if (field.name === name) {\n      /** Then push it to the fields array */\n      newLayout.push(field);\n    } else if (\n      leftovers.indexOf(field) === -1 &&\n      field_order.indexOf(field.name as keyof T) === -1\n    ) {\n      /** Field is not in the order, so push it to bottom of order. */\n      leftovers.push(field);\n    }\n  });\n  fields = [...newLayout, ...leftovers];\n  return fields;\n}\n\n/**\n * Set any attributes on the given fields.\n */\nexport function _setFieldAttributes<T extends Object>(\n  target_fields: Array<keyof T>,\n  fields: FieldConfig<T>[],\n  attributes: Partial<FieldConfig<T>>\n): void {\n  let i = 0,\n    len = target_fields.length;\n  if (len === 0) return;\n  const all_field_names = fields.map((f) => f.name);\n\n  for (; len > i; ++i) {\n    const field_index = all_field_names.indexOf(target_fields[i]);\n\n    if (field_index !== -1) {\n      const field_name = all_field_names[field_index];\n\n      _setFieldAttribute(field_name, fields, attributes);\n    }\n  }\n}\n\n/**\n * Set any attributes on the given field.\n */\nexport function _setFieldAttribute<T extends Object>(\n  name: keyof T,\n  fields: FieldConfig<T>[],\n  attributes: Partial<FieldConfig<T>>\n): void {\n  /**  Get field config */\n  const f: FieldConfig<T> = _get(name, fields);\n  /**  Loop over key of Partial FieldConfig */\n  let k: keyof typeof attributes;\n  for (k in attributes) {\n    /**  If we hit the attributes property then we set the field.attributes */\n    if (k === \"attributes\") {\n      Object.assign(f.attributes, attributes[k]);\n    } else if (k !== \"name\") {\n      /**  \"name\" is readonly on FieldConfig */\n      setFieldProperty(f, k, attributes[k]);\n    }\n  }\n}\n\n/**\n * Initially created to deal with TS compiler errors.\n * Dynamically assigning a value to f[key] wouldn't play nice.\n */\nfunction setFieldProperty<T extends Object, K extends keyof FieldConfig<T>>(\n  f: FieldConfig<T>,\n  key: K,\n  value: FieldConfig<T>[K]\n) {\n  f[key] = value;\n}\n\n//#endregion\n\n//#region Form Manager\n\n//#endregion\n","import { get, writable, Writable } from \"svelte/store\";\nimport { SvelteComponent, SvelteComponentDev } from \"svelte/internal\";\nimport { FieldConfig } from \".\";\nimport {\n  OnEvents,\n  RefData,\n  ValidationError,\n  ValidationCallback,\n  Callback,\n  ValidationOptions,\n  InitialFormState,\n} from \"./internal\";\nimport {\n  _buildFormFields,\n  _get,\n  _attachEventListeners,\n  _linkAllErrors,\n  _linkValues,\n  _requiredFieldsValid,\n  _setFieldOrder,\n  _setInitialState,\n  _resetState,\n  _executeValidationEvent,\n  _addCallbackToField,\n  _setFieldAttributes,\n} from \"./formHelpers\";\n\n/**\n * @Recomended_Use\n *  - Initialize let form = new Form(model, {refs: REFS, template: TEMPLATE, etc.})\n *  - Set the model (if you didn't in the first step)\n *  - Attach reference data (if you didn't in the first step)\n *  - Storify the form - check example.form.ts for an example\n *  - Now you're ready to use the form!\n *  - Pass it into the DynamicForm component and let the form generate itself!\n *\n * Performance is blazing with < 500 fields.\n * Can render up to 2000 inputs in per class/fields, not recommended.\n * Just break it up into 100 or so fields per form (max 250) if its a huge form.\n *  - Tested on late 2014 mbp - 2.5ghz core i7, 16gb ram\n *\n *\n * @TODO Create easy component/pattern for field groups and stepper/wizzard\n *\n * @TODO add a super-struct validation example. Could end up being more ergonomic.\n *\n * @TODO Allow fields, model and validator to be passed in separately.\n *  - This will allow for a more \"dynamic\" form building experience\n */\n\n/**\n * Formvana Form Class\n *\n * Main Concept: fields and model are separate.\n * Fields are built using the model, via the @field() decorator.\n * We keep the fields and the model in sync via your model property names\n * and field[name].\n *\n * Form is NOT valid, initially.\n *\n * Functions are camelCase.\n * Variables and stores are snake_case.\n * I'm sure everyone will love it.\n *\n */\nexport class Form<ModelType extends Object> {\n  constructor(\n    model: ModelType,\n    validation_options: Partial<ValidationOptions>,\n    form_properties?: Partial<Form<ModelType>>\n  ) {\n    if (form_properties) Object.assign(this, form_properties);\n\n    /** If there's a model, set the inital state's and build the fields */\n    if (model) {\n      this.model = model;\n      this.#buildFields();\n    } else {\n      throw new Error(\"Model is not valid. Please use a valid model.\");\n    }\n\n    if (validation_options) {\n      Object.assign(this.validation_options, validation_options);\n    } else {\n      throw new Error(\n        \"Please add a validator with ReturnType<Promise<ValidationError[]>>\"\n      );\n    }\n\n    if (this.refs) this.attachRefData();\n\n    if (this.disabled_fields)\n      _setFieldAttributes(this.disabled_fields, this.fields, {\n        disabled: true,\n        attributes: { disabled: true },\n      });\n\n    if (this.hidden_fields)\n      _setFieldAttributes(this.hidden_fields, this.fields, {\n        hidden: true,\n      });\n\n    /** Wait until everything is initalized, then set the inital state. */\n    _setInitialState(this, this.initial_state);\n  }\n\n  //#region ** Fields **\n\n  /**\n   * This is your form Model/Schema.\n   * Used to build the form.fields.\n   */\n  model: ModelType;\n\n  /**\n   * Fields are built using model's reflection metadata.\n   * Or using an array of field configuration objects.\n   */\n  fields: Array<FieldConfig<ModelType>> = [];\n\n  /**\n   * validation_options contains the logic and configuration for\n   * validating the form as well as linking errors to fields.\n   * If you're using class-validator, just pass in the validate func\n   */\n  validation_options: ValidationOptions = {\n    validator: async () => [],\n    on_events: new OnEvents(),\n    /** When to link this.field values to this.model values */\n    link_fields_to_model: \"always\",\n    field_error_link_name: \"property\",\n    /** These options from class-validator, thats why snake and camel case mixing */\n    options: {\n      skipMissingProperties: false,\n      dismissDefaultMessages: false,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      forbidUnknownValues: true,\n      stopAtFirstError: false,\n    },\n  };\n\n  /**\n   * Errors are attached to their corresponding fields.\n   * This pattern adds flexibility at the cost of a little complexity.\n   *\n   * When a single field is validated, the whole model is validated (if\n   * using class-validator).\n   * We just don't show all the errors to the user.\n   * This way, we know if the form is still invalid, even if we aren't\n   * showing the user any errors (like, pre-submit-button press).\n   */\n  errors: ValidationError[] = [];\n\n  /** Is the form valid? */\n  valid: Writable<boolean> = writable(false);\n  /** Has the form state changed from it's initial value? */\n  changed: Writable<boolean> = writable(false);\n  /** Has the form been altered in any way? */\n  pristine: Writable<boolean> = writable(true);\n  /** Is the form loading? */\n  loading: Writable<boolean> = writable(false);\n\n  /**\n   * Form Template Layout\n   *\n   * Render the form into a custom svelte template!\n   * Use a svelte component. Or use a string as the selector.\n   * * The template/component must accept {form} prop\n   *\n   * Note: add ` types\": [\"svelte\"] ` to tsconfig compilerOptions\n   * to remove TS import error of .svelte files (for your template)\n   */\n  template?:\n    | string\n    | typeof SvelteComponentDev\n    | typeof SvelteComponent\n    | typeof SvelteComponent;\n\n  /**\n   * refs hold any reference data you'll be using in the form\n   * e.g. seclet dropdowns, radio buttons, etc.\n   *\n   * If you did not set the model in constructor:\n   * Call attachRefData() to link the data to the respective field\n   *\n   * * Fields & reference data are linked via field.ref_key\n   */\n  refs?: RefData;\n\n  /**\n   * Emits value changes as a plain JS object.\n   * Format: { [field.name]: value }\n   *\n   * Similar to Angular form.valueChanges\n   */\n  value_changes: Writable<\n    Record<keyof ModelType | any, ModelType[keyof ModelType]>\n  > = writable({});\n\n  /**\n   * This is the model's initial state.\n   * It's only initial model and errors.\n   * We're keeping this simple.\n   */\n  initial_state: InitialFormState<ModelType> = {\n    model: undefined,\n    errors: undefined,\n  };\n\n  /** Use the NAME of the field (field.name) to disable/hide the field. */\n  hidden_fields?: Array<keyof ModelType>;\n  /** Use the NAME of the field (field.name) to disable/hide the field. */\n  disabled_fields?: Array<keyof ModelType>;\n\n  /**\n   * Any extra data you may want to pass around.\n   * @examples description, name, type, header, label, classes, etc.\n   *\n   * * If you're using the field.for_form propery, set form name here.\n   */\n  meta?: Record<string, string | number | boolean | Object>;\n\n  /**\n   * Determines the ordering of this.fields.\n   * Simply an array of field names (or group names or stepper names)\n   * in the order to be displayed\n   *\n   */\n  #field_order?: Array<keyof ModelType>;\n\n  /**\n   * We keep track of required fields because we let class-validator handle everything\n   * except *required* (field.required)\n   * So if there are no required fields, but there are errors, the form is still\n   * valid. This is the mechanism to help keep track of that.\n   * Keep track of the fields so we can validate faster.\n   */\n  #required_fields: Array<keyof ModelType> = [];\n\n  //#endregion ^^ Fields ^^\n\n  // #region ** Form API **\n\n  // #region - Form Setup\n\n  /**\n   * Builds the fields from the model.\n   * Builds the field configs via this.model using metadata-reflection.\n   *\n   * @TODO Allow plain JSON model, fields and schema validation/setup\n   */\n  #buildFields = (model: ModelType = this.model): void => {\n    this.fields = _buildFormFields(model, this.meta);\n\n    this.#required_fields = this.fields\n      .filter((f) => f.required)\n      .map((f) => f.name as keyof ModelType);\n  };\n\n  /**\n   * Aim for \"no-class\" initialization model:\n   *\n   * take Array<Partial<FieldConfig>> &\n   *\n   *      validation schema &\n   *\n   *      JSON model\n   *\n   *  => Form<Object>\n   *\n   * Model keys must match fieldConfig name & validation schema\n   * property keys.\n   *\n   *\n   */\n\n  /**\n   * ATTACH TO SAME ELEMENT AS FIELD.NAME {name}!\n   * This hooks up the event listeners!\n   *\n   * This is for Svelte's \"use:FUNCTION\" feature.\n   * The \"use\" directive passes the HTML Node as a parameter\n   * to the given function (e.g. use:useField(node: HTMLElement)).\n   *\n   * Use on the element that will be interacted with.\n   * e.g. <input/> -- <button/> -- <select/> -- etc.\n   * Check examples folder for more details.\n   */\n  useField = (node: HTMLElement & { name: keyof ModelType }): void => {\n    /** Attach HTML Node to field so we can remove event listeners later */\n    const field = _get(node.name, this.fields);\n    field.node = node;\n\n    if (this.validation_options.on_events)\n      _attachEventListeners(\n        field,\n        this.validation_options.on_events,\n        (e: Event) =>\n          _executeValidationEvent(this, this.#required_fields, field)\n      );\n  };\n\n  //#endregion\n\n  // #region - Validation\n\n  /**\n   * Validate the form!\n   * You can pass in callbacks as needed.\n   * Callbacks can be called \"before\" or \"after\" validation.\n   */\n  validate = (\n    callbacks?: ValidationCallback[]\n  ): Promise<ValidationError[]> | undefined => {\n    return _executeValidationEvent(\n      this,\n      this.#required_fields,\n      undefined,\n      callbacks\n    );\n  };\n\n  /**\n   * Validate the form, async!\n   * You can pass in callbacks as needed.\n   * Callbacks can be applied \"before\" or \"after\" validation.\n   */\n  validateAsync = async (\n    callbacks?: ValidationCallback[]\n  ): Promise<ValidationError[] | undefined> => {\n    return await _executeValidationEvent(\n      this,\n      this.#required_fields,\n      undefined,\n      callbacks\n    );\n  };\n\n  /** If want to (in)validate a specific field for any reason */\n  validateField = (\n    field_name: keyof ModelType,\n    withMessage?: string,\n    callbacks?: ValidationCallback[]\n  ): void => {\n    const field = _get(field_name, this.fields);\n    if (!withMessage) {\n      _executeValidationEvent(this, this.#required_fields, field, callbacks);\n    } else {\n      const err = new ValidationError(\n        field_name as string,\n        { error: withMessage },\n        { value: get(field.value) }\n      );\n      this.errors.push(err);\n      _linkAllErrors(\n        this.errors,\n        this.fields,\n        this.validation_options.field_error_link_name\n      );\n    }\n  };\n\n  /**\n   * Attach a callback to a field or array of fields.\n   * If the callback if type ValidationCallback it will be added\n   * to the validation handler\n   */\n  attachCallbacks = (\n    event: keyof HTMLElementEventMap,\n    callback: Callback | ValidationCallback,\n    field_names: keyof ModelType | Array<keyof ModelType>\n  ): void => {\n    if (Array.isArray(field_names)) {\n      const fields = field_names.map((f) => _get(f, this.fields));\n      fields.forEach((f) => {\n        _addCallbackToField(this, f, event, callback, this.#required_fields);\n      });\n    } else {\n      const field = _get(field_names, this.fields);\n      _addCallbackToField(this, field, event, callback, this.#required_fields);\n    }\n  };\n\n  /** Clear ALL the errors. */\n  clearErrors = (): void => {\n    this.errors = [];\n    this.fields.forEach((f) => {\n      f.errors.set(undefined);\n    });\n  };\n\n  //#endregion\n\n  // #region - Utility Methods\n\n  /** Get Field by name */\n  get = (field_name: keyof ModelType): FieldConfig<ModelType> => {\n    return _get(field_name, this.fields);\n  };\n\n  /**\n   * Load new data into the form and build the fields.\n   * Data is updated IN PLACE by default.\n   * Reinitialize is set to false, by default.\n   *\n   * Inital State is not updated by default.\n   */\n  loadModel = <T extends ModelType>(\n    model: T,\n    reinitialize: boolean = false,\n    update_initial_state: boolean = false\n  ): Form<ModelType> => {\n    if (reinitialize) {\n      this.model = model;\n      this.#buildFields();\n    } else {\n      let key: keyof ModelType;\n      for (key in this.model) {\n        this.model[key] = model[key];\n      }\n      _linkValues(false, this.fields, this.model);\n    }\n\n    if (update_initial_state) this.updateInitialState();\n\n    return this;\n  };\n\n  /**\n   * Pass in the reference data to add options to fields.\n   */\n  attachRefData = (refs?: RefData): void => {\n    const fields_with_ref_keys = this.fields.filter((f) => f.ref_key);\n    if (refs) {\n      this.refs = refs;\n      fields_with_ref_keys.forEach((field) => {\n        if (field.ref_key) field.options = refs[field.ref_key];\n      });\n    } else if (this.refs) {\n      fields_with_ref_keys.forEach((field) => {\n        if (field.ref_key && this.refs)\n          field.options = this.refs[field.ref_key];\n      });\n    }\n  };\n\n  /**\n   *! Make sure to call this when the component is unloaded/destroyed\n   * Removes all event listeners and clears the form state.\n   */\n  destroy = (): void => {\n    if (this.fields && this.fields.length > 0) {\n      // For each field...\n      this.fields.forEach((f) => {\n        // Remove all the event listeners!\n        if (this.validation_options.on_events)\n          Object.keys(this.validation_options.on_events).forEach((key) => {\n            f.node &&\n              f.node.removeEventListener(key, (ev) => {\n                (e: Event) =>\n                  _executeValidationEvent(this, this.#required_fields, f);\n              });\n          });\n      });\n    }\n  };\n\n  //#endregion\n\n  // #region - Form State\n\n  /** Resets to the inital state of the form. */\n  reset = (): void => {\n    _resetState(this, this.initial_state);\n  };\n\n  /** Well, this updates the initial state of the form. */\n  updateInitialState = (): void => {\n    _setInitialState(this, this.initial_state);\n    this.changed.set(false);\n  };\n\n  //#endregion\n\n  // #region - Layout\n\n  /**\n   * Set the field order.\n   * Layout param is simply an array of field (or group)\n   * names in the order to be displayed.\n   * Leftover fields are appended to bottom of form.\n   */\n  setFieldOrder = (order: Array<keyof ModelType>): void => {\n    if (order && order.length > 0) {\n      this.#field_order = order;\n      this.fields = _setFieldOrder(this.#field_order, this.fields);\n    }\n  };\n\n  /**\n   * Set attributes on a given set of fields.\n   *\n   * @exapmle to hide several fields:\n   * names = [field.name, field.name],\n   * attributes = { hidden: true };\n   */\n  setFieldAttributes = (\n    names: string | Array<keyof ModelType>,\n    attributes: Partial<FieldConfig<ModelType>>\n  ): void => {\n    if (names) {\n      if (Array.isArray(names)) {\n        _setFieldAttributes(names, this.fields, attributes);\n      } else {\n        _setFieldAttributes(\n          [names as keyof ModelType],\n          this.fields,\n          attributes\n        );\n      }\n    }\n  };\n\n  //#endregion\n\n  //#endregion ^^ Form API ^^\n}\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import \"reflect-metadata\";\nimport { FieldConfig } from \"./FieldConfig\";\n\nexport function field<T extends Object>(config: Partial<FieldConfig<T>>) {\n  return function (target: any, propertyKey: string) {\n    let properties: string[] =\n      Reflect.getMetadata(\"editableProperties\", target) || [];\n\n    if (properties.indexOf(propertyKey) < 0) {\n      properties.push(propertyKey);\n    }\n    Reflect.defineMetadata(\"editableProperties\", properties, target);\n\n    Reflect.defineMetadata(\"fieldConfig\", config, target, propertyKey);\n  };\n}\n\n// export function editable(target: any, propertyKey: string) {\n//   let properties: string[] =\n//     Reflect.getMetadata(\"editableProperties\", target) || [];\n\n//   if (properties.indexOf(propertyKey) < 0) {\n//     properties.push(propertyKey);\n//   }\n\n//   Reflect.defineMetadata(\"editableProperties\", properties, target);\n// }\n","import { get, writable, Writable } from \"svelte/store\";\nimport { Form } from \"./Form\";\nimport { ValidationCallback } from \"./internal\";\n\ntype FormDictionary = Array<Form<any>>;\n\n/**\n * Base interface for managing multiple instances of Form\n * classes.\n *\n * @TODO Class for FormGroup and FormStepper\n */\nexport class FormManager {\n  constructor(forms: FormDictionary, props?: Partial<FormManager>) {\n    if (forms) this.forms = forms;\n    if (props) Object.assign(this, props);\n\n    this.#getAllValueChanges();\n    this.#getAllValid();\n    this.#getAllChanged();\n    this.#getAllPristine();\n  }\n\n  /** Collection of Forms */\n  forms: FormDictionary = [];\n\n  loading: Writable<boolean> = writable(false);\n\n  all_value_changes: Writable<Record<string, any>> = writable({});\n\n  all_valid: Writable<boolean> = writable(false);\n\n  any_changed: Writable<boolean> = writable(false);\n\n  all_pristine: Writable<boolean> = writable(false);\n\n  #all_valid_list: Record<number, boolean> = {};\n  #all_changed_list: Record<number, boolean> = {};\n  #all_pristine_list: Record<number, boolean> = {};\n\n  /** Validate a given form, a number of forms, or all forms */\n  validateAll = (\n    callbacks?: ValidationCallback[],\n    form_indexes?: number[]\n  ): void => {\n    if (form_indexes) {\n      form_indexes.forEach((index) => {\n        this.forms && this.forms[index].validate(callbacks);\n      });\n    } else {\n      let k: keyof FormDictionary;\n      for (k in this.forms) {\n        this.forms[k].validate(callbacks);\n      }\n    }\n  };\n\n  destroy = () => {};\n\n  resetAll = () => {\n    this.forms.forEach((f) => f.reset());\n  };\n\n  /** All value changes of all forms */\n  #getAllValueChanges = (): void => {\n    /** Set all_valid = true, then check if any forms are invalid */\n    // let changes: Writable<Record<string, any>> = writable({}),\n    let k: keyof FormDictionary,\n      i = 0;\n    for (k in this.forms) {\n      const id = `form_${i}`;\n\n      /** If even one of them is invalid, set all_valid to false */\n      if (`${get(this.forms[k].value_changes)}` !== \"{}\") {\n        const previous_changes = get(this.all_value_changes);\n\n        if (!previous_changes[id]) {\n          this.all_value_changes.set({ ...previous_changes, [id]: {} });\n        }\n\n        this.forms[k].value_changes.subscribe((_changes) => {\n          const _previous_changes = get(this.all_value_changes);\n          this.all_value_changes.set({ ..._previous_changes, [id]: _changes });\n        });\n      }\n\n      i++;\n    }\n  };\n\n  /** Are all of the forms valid? */\n  #getAllValid = (): void => {\n    let k: keyof FormDictionary,\n      i = 0;\n    for (k in this.forms) {\n      const index = i;\n      this.forms[k].valid.subscribe((valid) => {\n        this.#all_valid_list[index] = valid;\n\n        if (Object.values(this.#all_valid_list).includes(false)) {\n          this.all_valid.set(false);\n        } else {\n          this.all_valid.set(true);\n        }\n      });\n      i++;\n    }\n  };\n\n  #getAllChanged = (): void => {\n    let k: keyof FormDictionary,\n      i = 0;\n    for (k in this.forms) {\n      const index = i;\n      this.forms[k].changed.subscribe((changed) => {\n        this.#all_changed_list[index] = changed;\n\n        if (Object.values(this.#all_changed_list).includes(true)) {\n          this.any_changed.set(true);\n        } else {\n          this.any_changed.set(false);\n        }\n      });\n      i++;\n    }\n  };\n\n  #getAllPristine = (): void => {\n    let k: keyof FormDictionary,\n      i = 0;\n    for (k in this.forms) {\n      const index = i;\n      this.forms[k].pristine.subscribe((pristine) => {\n        this.#all_pristine_list[index] = pristine;\n\n        if (Object.values(this.#all_pristine_list).includes(false)) {\n          this.all_pristine.set(false);\n        } else {\n          this.all_pristine.set(true);\n        }\n      });\n      i++;\n    }\n  };\n}\n\n/**\n * Collection of Forms used as steps.\n * @example a data collection wizard with many fields or whatever\n */\nexport class FormStepper extends FormManager {\n  constructor(forms: FormDictionary, props?: Partial<FormManager>) {\n    super(forms, props);\n  }\n\n  active_step: keyof FormDictionary = 0;\n\n  next = () => {\n    if (typeof this.active_step === \"number\") this.active_step++;\n  };\n\n  back = () => {\n    if (typeof this.active_step === \"number\") this.active_step--;\n  };\n}\n\n/**\n * Group of Forms which extends the FormManager functionality.\n */\nexport class FormGroup extends FormManager {\n  constructor(forms: FormDictionary, props?: Partial<FormManager>) {\n    super(forms, props);\n  }\n}\n"],"names":["noop","get_store_value","store","value","callbacks","unsub","subscribe","unsubscribe","_","subscriber_queue","writable","start","stop","subscribers","set","new_value","b","a","run_queue","length","i","s","push","update","fn","run","invalidate","subscriber","index","indexOf","splice","FieldConfig","[object Object]","name","init","Error","this","Object","assign","selector","attributes","type","options","undefined","label","errors","clearErrors","event","callback","node","addEventListener","e","Function","FieldStepper","fields","active_index","active_step","k","fields_valid","valid","get","ValidationError","model_property_key","property","constraints","OnEvents","disableAll","_get","filter","f","_addCallbackToField","form","field","required_fields","when","_executeValidationEvent","_linkValues","from_fields_to_model","model","len","val","_linkAllErrors","field_error_link_name","forEach","err","_hanldeValueLinking","link_fields_to_model","pristine","_executeCallbacks","validation_options","_setValueChanges","value_changes","_executeValidationCallbacks","validator","then","_handleValidationSideEffects","_hasStateChanged","changed","when_to_call","cb","_callFunction","Array","isArray","async","field_name","error","_linkFieldErrors","errs","map","_requiredFieldsValid","changes","_changes","keys","_setInitialState","initial_state","_setFieldAttributes","target_fields","all_field_names","field_index","_setFieldAttribute","setFieldProperty","key","Form","form_properties","refs","attachRefData","disabled_fields","disabled","hidden_fields","hidden","on_events","skipMissingProperties","dismissDefaultMessages","validationError","target","forbidUnknownValues","stopAtFirstError","meta","props","Reflect","getMetadata","prop","for_form","_buildFormFields","required","entries","eventName","shouldListen","nodeName","_attachEventListeners","withMessage","field_names","reinitialize","update_initial_state","updateInitialState","fields_with_ref_keys","ref_key","removeEventListener","ev","_resetState","order","field_order","newLayout","leftovers","_setFieldOrder","names","config","propertyKey","properties","defineMetadata","factory","root","global","self","exporter","makeExporter","previous","defineProperty","configurable","hasOwn","prototype","hasOwnProperty","supportsSymbol","Symbol","toPrimitiveSymbol","toPrimitive","iteratorSymbol","iterator","supportsCreate","create","supportsProto","__proto__","downLevel","HashMap","MakeDictionary","has","call","functionPrototype","getPrototypeOf","usePolyfill","process","env","_Map","Map","CreateMapPolyfill","_Set","Set","CreateSetPolyfill","Metadata","WeakMap","CreateWeakMapPolyfill","decorate","decorators","IsUndefined","IsArray","TypeError","IsConstructor","DecorateConstructor","IsObject","IsNull","DecorateProperty","ToPropertyKey","metadata","metadataKey","metadataValue","decorator","IsPropertyKey","OrdinaryDefineOwnMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","getMetadataKeys","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","delete","size","targetMetadata","decorated","descriptor","O","P","Create","MetadataKey","parent","OrdinaryGetPrototypeOf","ToBoolean","MetadataValue","ownKeys","parentKeys","_i","ownKeys_1","add","_a","parentKeys_1","GetIterator","next","IteratorStep","nextValue","IteratorValue","IteratorClose","Type","x","IsSymbol","ToPrimitive","input","PreferredType","hint","exoticToPrim","GetMethod","result","OrdinaryToPrimitive","toString_1","toString","IsCallable","valueOf","toString_2","argument","ToString","V","func","obj","method","iterResult","done","proto","prototypeProto","constructor","cacheSentinel","arraySentinel","MapIterator","values","_index","_keys","_values","_selector","throw","return","_cacheKey","_cacheIndex","enumerable","_find","clear","getKey","getValue","getEntry","insert","_map","UUID_SIZE","rootKey","CreateUniqueKey","_key","table","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","buffer","Math","random","GenRandomBytes","Uint8Array","crypto","getRandomValues","msCrypto","data","offset","byte","toLowerCase","__","FormManager","forms","form_indexes","validate","reset","id","previous_changes","all_value_changes","_previous_changes","includes","all_valid","any_changed","all_pristine","FormStepper","super","FormGroup"],"mappings":"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"}