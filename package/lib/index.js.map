{"version":3,"file":"index.js","sources":["../node_modules/svelte/internal/index.mjs","../node_modules/svelte/store/index.mjs","core/FieldConfig.ts","core/types.ts","../node_modules/class-validator/esm5/metadata/ValidationMetadata.js","../node_modules/class-validator/esm5/validation-schema/ValidationSchemaToMetadataTransformer.js","../node_modules/class-validator/esm5/utils/get-global.util.js","../node_modules/class-validator/esm5/utils/is-promise.util.js","../node_modules/class-validator/esm5/metadata/MetadataStorage.js","../node_modules/class-validator/esm5/validation/ValidationError.js","../node_modules/class-validator/esm5/validation/ValidationTypes.js","../node_modules/class-validator/esm5/validation/ValidationUtils.js","../node_modules/class-validator/esm5/validation/ValidationExecutor.js","../node_modules/class-validator/esm5/utils/convert-to-array.util.js","../node_modules/class-validator/esm5/validation/Validator.js","../node_modules/class-validator/esm5/container.js","../node_modules/reflect-metadata/Reflect.js","core/internal.ts","../node_modules/class-validator/esm5/index.js","core/Form.ts","core/decorators.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.35.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { ValidationError } from \"class-validator\";\nimport { SvelteComponent } from \"svelte\";\nimport { writable, Writable } from \"svelte/store\";\n\nexport interface FieldGroup {\n  name: string;\n  label?: string;\n}\n\nexport interface FieldStep {\n  index: number;\n  label?: string;\n}\n\n/**\n * FieldConfig is used to help with the form auto generation functionality.\n *\n * This is not meant to be a complete HTML Input/Select/etc replacement.\n * It is simply a vehicle to help give the form generator\n * an easy-to-use format to work with.\n */\nexport class FieldConfig {\n  constructor(init: Partial<FieldConfig>) {\n    // I know, Object.assign... lots of freedom there.\n    Object.assign(this, init);\n\n    if (!this.selector && !this.template) {\n      throw new Error(\n        `Please pass in a valid Element.\\nEither a string selector or a SvelteComponent.`\n      );\n    }\n\n    // Set the type attribute if it's not already set\n    if (!this.attributes[\"type\"]) {\n      this.attributes[\"type\"] = this.type;\n    }\n\n    /**\n     * Trying to set some sane defaults when initializing field.\n     * These can be over-written easily by simply adding a value to your\n     * class field.\n     * E.g. class YourClass{ description: string = \"This is a descriptor.\" }\n     * The text \"This is a descriptor.\" will be linked to the FieldConfig.value\n     * when the fields are built from the model (in Form.buildFields();)\n     */\n    switch (this.type) {\n      case \"text\" || \"email\" || \"password\" || \"string\":\n        this.setInitialValue(\"\");\n        break;\n      case \"decimal\" || \"double\":\n        this.setInitialValue(0.0);\n        break;\n      case \"number\" || \"int\" || \"integer\":\n        this.setInitialValue(0);\n        break;\n      case \"boolean\" || \"choice\" || \"radio\" || \"checkbox\":\n        this.setInitialValue(false);\n        this.options = [];\n        break;\n      case \"select\" || \"dropdown\":\n        this.options = [];\n        break;\n\n      default:\n        this.setInitialValue(undefined);\n        break;\n    }\n\n    // If there's no aria-label and the title attribute is present...\n    if (!this.attributes[\"aria-label\"] && this.attributes[\"title\"]) {\n      // Set aria-label = title\n      this.attributes[\"aria-label\"] = this.attributes[\"title\"];\n    } else if (!this.attributes[\"aria-label\"]) {\n      // If no aria-label then set it to the label or name\n      this.attributes[\"aria-label\"] = this.label || this.name;\n    }\n  }\n\n  /**\n   * Only set \"name\" if you are using FieldConfig apart from\n   * your object/model.\n   * I.e. you are using plain JSON rather than a TS class.\n   */\n  readonly name: string;\n\n  // Used to add and remove event listeners\n  node: HTMLElement;\n\n  /**\n   * el can be either String or Svelte Component.\n   * This allows us a more flexible dynamic field generator.\n   * Using a template also allows you to style each input as needed.\n   */\n  selector?: string;\n  template?: SvelteComponent;\n\n  label?: string;\n  type: string = \"text\"; // Defaults to text, for now\n  required: boolean = false;\n  value: Writable<any> = writable(undefined);\n\n  /**\n   * You can use these to apply styles.\n   * However, using a template/component is recommended.\n   *\n   */\n  styles?: string;\n  classes?: string;\n\n  /**\n   * Used if there is a set of \"options\" to choose from.\n   */\n  options?: any[];\n  ref_key?: string; // Reference data key\n\n  disabled: boolean = false;\n  hidden: boolean = false;\n\n  /**\n   * Validation Errors!\n   * We're mainly looking for the class-validator \"constraints\"\n   * One ValidationError object can have multiple errors (constraints)\n   */\n  errors: Writable<ValidationError | null> = writable(null);\n\n  /**\n   * * JSON of things like:\n   * -- disabled\n   * -- id=\"something\"\n   * -- type=\"text || email || password || whatever\"\n   * -- class='input class'\n   * -- title='input title'\n   * -- multiple\n   * -- etc.\n   * -- anything you want!\n   */\n  attributes: object = {};\n\n  hint?: string; // Mainly for textarea, or whatever\n  group?: FieldGroup;\n  step?: FieldStep;\n\n  private initial_value: any;\n\n  clearValue = () => {\n    this.value.set(this.initial_value);\n  };\n\n  clearErrors = () => {\n    this.errors.set(null);\n  };\n\n  clear = () => {\n    this.clearValue();\n    this.clearErrors();\n  };\n\n  setInitialValue = (value: any) => {\n    this.initial_value = value;\n    this.value.set(value);\n  };\n}\n","\nexport type ValidationErrorType = {\n  target?: Object; // Object that was validated.\n  property: string; // Object's property that didn't pass validation.\n  value?: any; // Value that didn't pass a validation.\n  constraints?: {\n    // Constraints that failed validation with error messages.\n    [type: string]: string;\n  };\n  children?: ValidationErrorType[];\n};\n\nexport class ValidationError {\n  /**\n   * @param errors essentially Record<string #1, string #2>\n   * with #1 being the name of the error constraint\n   * and #2 being the error message\n   * @param model_property_key, which model field are we linking this to?\n   * @param options, anything else part of the ValidationErrorType\n   */\n  constructor(\n    model_property_key?: string,\n    errors?: { [type: string]: string },\n    options?: Partial<ValidationErrorType>\n  ) {\n    this.property = model_property_key;\n    if (errors) {\n      this.constraints = errors;\n    }\n    if (options) {\n      Object.keys(this).forEach((key) => {\n        if (options[key]) this[key] = options[key];\n      });\n    }\n  }\n\n  target?: Object; // Object that was validated.\n  property: string; // Object's property that didn't pass validation.\n  value?: any; // Value that didn't pass a validation.\n  constraints?: {\n    // Constraints that failed validation with error messages.\n    [type: string]: string;\n  };\n  children?: ValidationErrorType[];\n}\n\nexport type Callback = ((...args: any) => any) | (() => any);\n\nexport type ValidationCallback = {\n  callback: Callback;\n  /**\n   * When should the callback fire?\n   * \"before\" or \"after\" validation?\n   */\n  when: \"before\" | \"after\";\n};\n\nexport type LinkValuesOnEvent = \"all\" | \"field\";\n\nexport type PerformanceOptions = {\n  link_all_values_on_event: LinkValuesOnEvent;\n  enable_hidden_fields_detection: boolean;\n  enable_disabled_fields_detection: boolean;\n  enable_change_detection: boolean;\n};\n/**\n * Determines which events to validate/clear validation, on.\n * And, you can bring your own event listeners just by adding one on\n * the init.\n * Enabled By Default: blue, change, focus, input, submit\n *\n * Also has the good ole Object.assign in the constructor.\n * It's brazen, but you're a smart kid.\n * Use it wisely.\n *\n * TODO: Possilbe candidate for Mapped Type\n */\nexport class OnEvents {\n  constructor(init?: Partial<OnEvents>, disableAll: boolean = false) {\n    // If disableAll is false, turn off all event listeners\n    if (disableAll) {\n      Object.keys(this).forEach((key) => {\n        this[key] = false;\n      });\n    }\n    Object.assign(this, init);\n  }\n\n  blur: boolean = true;\n  change: boolean = true;\n  click: boolean = false;\n  dblclick: boolean = false;\n  focus: boolean = true;\n  input: boolean = true;\n  keydown: boolean = false;\n  keypress: boolean = false;\n  keyup: boolean = false;\n  mount: boolean = false;\n  mousedown: boolean = false;\n  mouseenter: boolean = false;\n  mouseleave: boolean = false;\n  mousemove: boolean = false;\n  mouseout: boolean = false;\n  mouseover: boolean = false;\n  mouseup: boolean = false;\n  submit: boolean = true;\n}\n\n/**\n * Should we link the values always?\n * Or only if the form is valid?\n */\n// export enum LinkOnEvent {\n//   Always,\n//   Valid,\n// }\nexport type LinkOnEvent = \"always\" | \"valid\";\n\n/**\n * Data format for the reference data items\n * Form.refs are of type Record<string, RefDataItem[]>\n *\n * TODO: Possilbe candidate for Mapped Type\n */\nexport interface RefDataItem {\n  label: string;\n  value: any;\n  data?: any;\n}\n\nexport type RefData = Record<string, RefDataItem[]>;\n","/**\n * This metadata contains validation rules.\n */\nvar ValidationMetadata = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ValidationMetadata(args) {\n        /**\n         * Validation groups used for this validation.\n         */\n        this.groups = [];\n        /**\n         * Specifies if validated value is an array and each of its item must be validated.\n         */\n        this.each = false;\n        /*\n         * A transient set of data passed through to the validation result for response mapping\n         */\n        this.context = undefined;\n        this.type = args.type;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.constraints = args.constraints;\n        this.constraintCls = args.constraintCls;\n        this.validationTypeOptions = args.validationTypeOptions;\n        if (args.validationOptions) {\n            this.message = args.validationOptions.message;\n            this.groups = args.validationOptions.groups;\n            this.always = args.validationOptions.always;\n            this.each = args.validationOptions.each;\n            this.context = args.validationOptions.context;\n        }\n    }\n    return ValidationMetadata;\n}());\nexport { ValidationMetadata };\n//# sourceMappingURL=ValidationMetadata.js.map","import { ValidationMetadata } from '../metadata/ValidationMetadata';\n/**\n * Used to transform validation schemas to validation metadatas.\n */\nvar ValidationSchemaToMetadataTransformer = /** @class */ (function () {\n    function ValidationSchemaToMetadataTransformer() {\n    }\n    ValidationSchemaToMetadataTransformer.prototype.transform = function (schema) {\n        var metadatas = [];\n        Object.keys(schema.properties).forEach(function (property) {\n            schema.properties[property].forEach(function (validation) {\n                var validationOptions = {\n                    message: validation.message,\n                    groups: validation.groups,\n                    always: validation.always,\n                    each: validation.each,\n                };\n                var args = {\n                    type: validation.type,\n                    target: schema.name,\n                    propertyName: property,\n                    constraints: validation.constraints,\n                    validationTypeOptions: validation.options,\n                    validationOptions: validationOptions,\n                };\n                metadatas.push(new ValidationMetadata(args));\n            });\n        });\n        return metadatas;\n    };\n    return ValidationSchemaToMetadataTransformer;\n}());\nexport { ValidationSchemaToMetadataTransformer };\n//# sourceMappingURL=ValidationSchemaToMetadataTransformer.js.map","/**\n * This function returns the global object across Node and browsers.\n *\n * Note: `globalThis` is the standardized approach however it has been added to\n * Node.js in version 12. We need to include this snippet until Node 12 EOL.\n */\nexport function getGlobal() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: Cannot find name 'window'.\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore: Cannot find name 'window'.\n        return window;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: Cannot find name 'self'.\n    if (typeof self !== 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore: Cannot find name 'self'.\n        return self;\n    }\n}\n//# sourceMappingURL=get-global.util.js.map","// https://github.com/TylorS/typed-is-promise/blob/abf1514e1b6961adfc75765476b0debb96b2c3ae/src/index.ts\nexport function isPromise(p) {\n    return p !== null && typeof p === 'object' && typeof p.then === 'function';\n}\n//# sourceMappingURL=is-promise.util.js.map","import { ValidationSchemaToMetadataTransformer } from '../validation-schema/ValidationSchemaToMetadataTransformer';\nimport { getGlobal } from '../utils';\n/**\n * Storage all metadatas.\n */\nvar MetadataStorage = /** @class */ (function () {\n    function MetadataStorage() {\n        // -------------------------------------------------------------------------\n        // Private properties\n        // -------------------------------------------------------------------------\n        this.validationMetadatas = [];\n        this.constraintMetadatas = [];\n    }\n    Object.defineProperty(MetadataStorage.prototype, \"hasValidationMetaData\", {\n        get: function () {\n            return !!this.validationMetadatas.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Adds a new validation metadata.\n     */\n    MetadataStorage.prototype.addValidationSchema = function (schema) {\n        var _this = this;\n        var validationMetadatas = new ValidationSchemaToMetadataTransformer().transform(schema);\n        validationMetadatas.forEach(function (validationMetadata) { return _this.addValidationMetadata(validationMetadata); });\n    };\n    /**\n     * Adds a new validation metadata.\n     */\n    MetadataStorage.prototype.addValidationMetadata = function (metadata) {\n        this.validationMetadatas.push(metadata);\n    };\n    /**\n     * Adds a new constraint metadata.\n     */\n    MetadataStorage.prototype.addConstraintMetadata = function (metadata) {\n        this.constraintMetadatas.push(metadata);\n    };\n    /**\n     * Groups metadata by their property names.\n     */\n    MetadataStorage.prototype.groupByPropertyName = function (metadata) {\n        var grouped = {};\n        metadata.forEach(function (metadata) {\n            if (!grouped[metadata.propertyName])\n                grouped[metadata.propertyName] = [];\n            grouped[metadata.propertyName].push(metadata);\n        });\n        return grouped;\n    };\n    /**\n     * Gets all validation metadatas for the given object with the given groups.\n     */\n    MetadataStorage.prototype.getTargetValidationMetadatas = function (targetConstructor, targetSchema, always, strictGroups, groups) {\n        var includeMetadataBecauseOfAlwaysOption = function (metadata) {\n            // `metadata.always` overrides global default.\n            if (typeof metadata.always !== 'undefined')\n                return metadata.always;\n            // `metadata.groups` overrides global default.\n            if (metadata.groups && metadata.groups.length)\n                return false;\n            // Use global default.\n            return always;\n        };\n        var excludeMetadataBecauseOfStrictGroupsOption = function (metadata) {\n            if (strictGroups) {\n                // Validation is not using groups.\n                if (!groups || !groups.length) {\n                    // `metadata.groups` has at least one group.\n                    if (metadata.groups && metadata.groups.length)\n                        return true;\n                }\n            }\n            return false;\n        };\n        // get directly related to a target metadatas\n        var originalMetadatas = this.validationMetadatas.filter(function (metadata) {\n            if (metadata.target !== targetConstructor && metadata.target !== targetSchema)\n                return false;\n            if (includeMetadataBecauseOfAlwaysOption(metadata))\n                return true;\n            if (excludeMetadataBecauseOfStrictGroupsOption(metadata))\n                return false;\n            if (groups && groups.length > 0)\n                return metadata.groups && !!metadata.groups.find(function (group) { return groups.indexOf(group) !== -1; });\n            return true;\n        });\n        // get metadatas for inherited classes\n        var inheritedMetadatas = this.validationMetadatas.filter(function (metadata) {\n            // if target is a string it's means we validate against a schema, and there is no inheritance support for schemas\n            if (typeof metadata.target === 'string')\n                return false;\n            if (metadata.target === targetConstructor)\n                return false;\n            if (metadata.target instanceof Function && !(targetConstructor.prototype instanceof metadata.target))\n                return false;\n            if (includeMetadataBecauseOfAlwaysOption(metadata))\n                return true;\n            if (excludeMetadataBecauseOfStrictGroupsOption(metadata))\n                return false;\n            if (groups && groups.length > 0)\n                return metadata.groups && !!metadata.groups.find(function (group) { return groups.indexOf(group) !== -1; });\n            return true;\n        });\n        // filter out duplicate metadatas, prefer original metadatas instead of inherited metadatas\n        var uniqueInheritedMetadatas = inheritedMetadatas.filter(function (inheritedMetadata) {\n            return !originalMetadatas.find(function (originalMetadata) {\n                return (originalMetadata.propertyName === inheritedMetadata.propertyName &&\n                    originalMetadata.type === inheritedMetadata.type);\n            });\n        });\n        return originalMetadatas.concat(uniqueInheritedMetadatas);\n    };\n    /**\n     * Gets all validator constraints for the given object.\n     */\n    MetadataStorage.prototype.getTargetValidatorConstraints = function (target) {\n        return this.constraintMetadatas.filter(function (metadata) { return metadata.target === target; });\n    };\n    return MetadataStorage;\n}());\nexport { MetadataStorage };\n/**\n * Gets metadata storage.\n * Metadata storage follows the best practices and stores metadata in a global variable.\n */\nexport function getMetadataStorage() {\n    var global = getGlobal();\n    if (!global.classValidatorMetadataStorage) {\n        global.classValidatorMetadataStorage = new MetadataStorage();\n    }\n    return global.classValidatorMetadataStorage;\n}\n//# sourceMappingURL=MetadataStorage.js.map","/**\n * Validation error description.\n */\nvar ValidationError = /** @class */ (function () {\n    function ValidationError() {\n    }\n    /**\n     *\n     * @param shouldDecorate decorate the message with ANSI formatter escape codes for better readability\n     * @param hasParent true when the error is a child of an another one\n     * @param parentPath path as string to the parent of this property\n     */\n    ValidationError.prototype.toString = function (shouldDecorate, hasParent, parentPath) {\n        var _this = this;\n        if (shouldDecorate === void 0) { shouldDecorate = false; }\n        if (hasParent === void 0) { hasParent = false; }\n        if (parentPath === void 0) { parentPath = \"\"; }\n        var boldStart = shouldDecorate ? \"\\u001B[1m\" : \"\";\n        var boldEnd = shouldDecorate ? \"\\u001B[22m\" : \"\";\n        var propConstraintFailed = function (propertyName) {\n            return \" - property \" + boldStart + parentPath + propertyName + boldEnd + \" has failed the following constraints: \" + boldStart + Object.keys(_this.constraints).join(\", \") + boldEnd + \" \\n\";\n        };\n        if (!hasParent) {\n            return (\"An instance of \" + boldStart + (this.target ? this.target.constructor.name : 'an object') + boldEnd + \" has failed the validation:\\n\" +\n                (this.constraints ? propConstraintFailed(this.property) : \"\") +\n                (this.children\n                    ? this.children.map(function (childError) { return childError.toString(shouldDecorate, true, _this.property); }).join(\"\")\n                    : \"\"));\n        }\n        else {\n            // we format numbers as array indexes for better readability.\n            var formattedProperty_1 = Number.isInteger(+this.property)\n                ? \"[\" + this.property + \"]\"\n                : \"\" + (parentPath ? \".\" : \"\") + this.property;\n            if (this.constraints) {\n                return propConstraintFailed(formattedProperty_1);\n            }\n            else {\n                return this.children\n                    ? this.children\n                        .map(function (childError) { return childError.toString(shouldDecorate, true, \"\" + parentPath + formattedProperty_1); })\n                        .join(\"\")\n                    : \"\";\n            }\n        }\n    };\n    return ValidationError;\n}());\nexport { ValidationError };\n//# sourceMappingURL=ValidationError.js.map","/**\n * Validation types.\n */\nvar ValidationTypes = /** @class */ (function () {\n    function ValidationTypes() {\n    }\n    /**\n     * Checks if validation type is valid.\n     */\n    ValidationTypes.isValid = function (type) {\n        var _this = this;\n        return (type !== 'isValid' &&\n            type !== 'getMessage' &&\n            Object.keys(this)\n                .map(function (key) { return _this[key]; })\n                .indexOf(type) !== -1);\n    };\n    /* system */\n    ValidationTypes.CUSTOM_VALIDATION = 'customValidation'; // done\n    ValidationTypes.NESTED_VALIDATION = 'nestedValidation'; // done\n    ValidationTypes.PROMISE_VALIDATION = 'promiseValidation'; // done\n    ValidationTypes.CONDITIONAL_VALIDATION = 'conditionalValidation'; // done\n    ValidationTypes.WHITELIST = 'whitelistValidation'; // done\n    ValidationTypes.IS_DEFINED = 'isDefined'; // done\n    return ValidationTypes;\n}());\nexport { ValidationTypes };\n//# sourceMappingURL=ValidationTypes.js.map","/**\n * Convert the constraint to a string to be shown in an error\n */\nexport function constraintToString(constraint) {\n    if (Array.isArray(constraint)) {\n        return constraint.join(', ');\n    }\n    return \"\" + constraint;\n}\nvar ValidationUtils = /** @class */ (function () {\n    function ValidationUtils() {\n    }\n    ValidationUtils.replaceMessageSpecialTokens = function (message, validationArguments) {\n        var messageString;\n        if (message instanceof Function) {\n            messageString = message(validationArguments);\n        }\n        else if (typeof message === 'string') {\n            messageString = message;\n        }\n        if (messageString && validationArguments.constraints instanceof Array) {\n            validationArguments.constraints.forEach(function (constraint, index) {\n                messageString = messageString.replace(new RegExp(\"\\\\$constraint\" + (index + 1), 'g'), constraintToString(constraint));\n            });\n        }\n        if (messageString &&\n            validationArguments.value !== undefined &&\n            validationArguments.value !== null &&\n            typeof validationArguments.value === 'string')\n            messageString = messageString.replace(/\\$value/g, validationArguments.value);\n        if (messageString)\n            messageString = messageString.replace(/\\$property/g, validationArguments.property);\n        if (messageString)\n            messageString = messageString.replace(/\\$target/g, validationArguments.targetName);\n        return messageString;\n    };\n    return ValidationUtils;\n}());\nexport { ValidationUtils };\n//# sourceMappingURL=ValidationUtils.js.map","import { ValidationError } from './ValidationError';\nimport { ValidationTypes } from './ValidationTypes';\nimport { ValidationUtils } from './ValidationUtils';\nimport { isPromise, convertToArray } from '../utils';\nimport { getMetadataStorage } from '../metadata/MetadataStorage';\n/**\n * Executes validation over given object.\n */\nvar ValidationExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ValidationExecutor(validator, validatorOptions) {\n        this.validator = validator;\n        this.validatorOptions = validatorOptions;\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this.awaitingPromises = [];\n        this.ignoreAsyncValidations = false;\n        // -------------------------------------------------------------------------\n        // Private Properties\n        // -------------------------------------------------------------------------\n        this.metadataStorage = getMetadataStorage();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    ValidationExecutor.prototype.execute = function (object, targetSchema, validationErrors) {\n        var _this = this;\n        var _a;\n        /**\n         * If there is no metadata registered it means possibly the dependencies are not flatterned and\n         * more than one instance is used.\n         *\n         * TODO: This needs proper handling, forcing to use the same container or some other proper solution.\n         */\n        if (!this.metadataStorage.hasValidationMetaData && ((_a = this.validatorOptions) === null || _a === void 0 ? void 0 : _a.enableDebugMessages) === true) {\n            console.warn(\"No metadata found. There is more than once class-validator version installed probably. You need to flatten your dependencies.\");\n        }\n        var groups = this.validatorOptions ? this.validatorOptions.groups : undefined;\n        var strictGroups = (this.validatorOptions && this.validatorOptions.strictGroups) || false;\n        var always = (this.validatorOptions && this.validatorOptions.always) || false;\n        var targetMetadatas = this.metadataStorage.getTargetValidationMetadatas(object.constructor, targetSchema, always, strictGroups, groups);\n        var groupedMetadatas = this.metadataStorage.groupByPropertyName(targetMetadatas);\n        if (this.validatorOptions && this.validatorOptions.forbidUnknownValues && !targetMetadatas.length) {\n            var validationError = new ValidationError();\n            if (!this.validatorOptions ||\n                !this.validatorOptions.validationError ||\n                this.validatorOptions.validationError.target === undefined ||\n                this.validatorOptions.validationError.target === true)\n                validationError.target = object;\n            validationError.value = undefined;\n            validationError.property = undefined;\n            validationError.children = [];\n            validationError.constraints = { unknownValue: 'an unknown value was passed to the validate function' };\n            validationErrors.push(validationError);\n            return;\n        }\n        if (this.validatorOptions && this.validatorOptions.whitelist)\n            this.whitelist(object, groupedMetadatas, validationErrors);\n        // General validation\n        Object.keys(groupedMetadatas).forEach(function (propertyName) {\n            var value = object[propertyName];\n            var definedMetadatas = groupedMetadatas[propertyName].filter(function (metadata) { return metadata.type === ValidationTypes.IS_DEFINED; });\n            var metadatas = groupedMetadatas[propertyName].filter(function (metadata) { return metadata.type !== ValidationTypes.IS_DEFINED && metadata.type !== ValidationTypes.WHITELIST; });\n            if (value instanceof Promise &&\n                metadatas.find(function (metadata) { return metadata.type === ValidationTypes.PROMISE_VALIDATION; })) {\n                _this.awaitingPromises.push(value.then(function (resolvedValue) {\n                    _this.performValidations(object, resolvedValue, propertyName, definedMetadatas, metadatas, validationErrors);\n                }));\n            }\n            else {\n                _this.performValidations(object, value, propertyName, definedMetadatas, metadatas, validationErrors);\n            }\n        });\n    };\n    ValidationExecutor.prototype.whitelist = function (object, groupedMetadatas, validationErrors) {\n        var _this = this;\n        var notAllowedProperties = [];\n        Object.keys(object).forEach(function (propertyName) {\n            // does this property have no metadata?\n            if (!groupedMetadatas[propertyName] || groupedMetadatas[propertyName].length === 0)\n                notAllowedProperties.push(propertyName);\n        });\n        if (notAllowedProperties.length > 0) {\n            if (this.validatorOptions && this.validatorOptions.forbidNonWhitelisted) {\n                // throw errors\n                notAllowedProperties.forEach(function (property) {\n                    var _a;\n                    var validationError = _this.generateValidationError(object, object[property], property);\n                    validationError.constraints = (_a = {}, _a[ValidationTypes.WHITELIST] = \"property \" + property + \" should not exist\", _a);\n                    validationError.children = undefined;\n                    validationErrors.push(validationError);\n                });\n            }\n            else {\n                // strip non allowed properties\n                notAllowedProperties.forEach(function (property) { return delete object[property]; });\n            }\n        }\n    };\n    ValidationExecutor.prototype.stripEmptyErrors = function (errors) {\n        var _this = this;\n        return errors.filter(function (error) {\n            if (error.children) {\n                error.children = _this.stripEmptyErrors(error.children);\n            }\n            if (Object.keys(error.constraints).length === 0) {\n                if (error.children.length === 0) {\n                    return false;\n                }\n                else {\n                    delete error.constraints;\n                }\n            }\n            return true;\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    ValidationExecutor.prototype.performValidations = function (object, value, propertyName, definedMetadatas, metadatas, validationErrors) {\n        var customValidationMetadatas = metadatas.filter(function (metadata) { return metadata.type === ValidationTypes.CUSTOM_VALIDATION; });\n        var nestedValidationMetadatas = metadatas.filter(function (metadata) { return metadata.type === ValidationTypes.NESTED_VALIDATION; });\n        var conditionalValidationMetadatas = metadatas.filter(function (metadata) { return metadata.type === ValidationTypes.CONDITIONAL_VALIDATION; });\n        var validationError = this.generateValidationError(object, value, propertyName);\n        validationErrors.push(validationError);\n        var canValidate = this.conditionalValidations(object, value, conditionalValidationMetadatas);\n        if (!canValidate) {\n            return;\n        }\n        // handle IS_DEFINED validation type the special way - it should work no matter skipUndefinedProperties/skipMissingProperties is set or not\n        this.customValidations(object, value, definedMetadatas, validationError);\n        this.mapContexts(object, value, definedMetadatas, validationError);\n        if (value === undefined && this.validatorOptions && this.validatorOptions.skipUndefinedProperties === true) {\n            return;\n        }\n        if (value === null && this.validatorOptions && this.validatorOptions.skipNullProperties === true) {\n            return;\n        }\n        if ((value === null || value === undefined) &&\n            this.validatorOptions &&\n            this.validatorOptions.skipMissingProperties === true) {\n            return;\n        }\n        this.customValidations(object, value, customValidationMetadatas, validationError);\n        this.nestedValidations(value, nestedValidationMetadatas, validationError.children);\n        this.mapContexts(object, value, metadatas, validationError);\n        this.mapContexts(object, value, customValidationMetadatas, validationError);\n    };\n    ValidationExecutor.prototype.generateValidationError = function (object, value, propertyName) {\n        var validationError = new ValidationError();\n        if (!this.validatorOptions ||\n            !this.validatorOptions.validationError ||\n            this.validatorOptions.validationError.target === undefined ||\n            this.validatorOptions.validationError.target === true)\n            validationError.target = object;\n        if (!this.validatorOptions ||\n            !this.validatorOptions.validationError ||\n            this.validatorOptions.validationError.value === undefined ||\n            this.validatorOptions.validationError.value === true)\n            validationError.value = value;\n        validationError.property = propertyName;\n        validationError.children = [];\n        validationError.constraints = {};\n        return validationError;\n    };\n    ValidationExecutor.prototype.conditionalValidations = function (object, value, metadatas) {\n        return metadatas\n            .map(function (metadata) { return metadata.constraints[0](object, value); })\n            .reduce(function (resultA, resultB) { return resultA && resultB; }, true);\n    };\n    ValidationExecutor.prototype.customValidations = function (object, value, metadatas, error) {\n        var _this = this;\n        metadatas.forEach(function (metadata) {\n            _this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls).forEach(function (customConstraintMetadata) {\n                if (customConstraintMetadata.async && _this.ignoreAsyncValidations)\n                    return;\n                if (_this.validatorOptions &&\n                    _this.validatorOptions.stopAtFirstError &&\n                    Object.keys(error.constraints || {}).length > 0)\n                    return;\n                var validationArguments = {\n                    targetName: object.constructor ? object.constructor.name : undefined,\n                    property: metadata.propertyName,\n                    object: object,\n                    value: value,\n                    constraints: metadata.constraints,\n                };\n                if (!metadata.each || !(value instanceof Array || value instanceof Set || value instanceof Map)) {\n                    var validatedValue = customConstraintMetadata.instance.validate(value, validationArguments);\n                    if (isPromise(validatedValue)) {\n                        var promise = validatedValue.then(function (isValid) {\n                            if (!isValid) {\n                                var _a = _this.createValidationError(object, value, metadata, customConstraintMetadata), type = _a[0], message = _a[1];\n                                error.constraints[type] = message;\n                                if (metadata.context) {\n                                    if (!error.contexts) {\n                                        error.contexts = {};\n                                    }\n                                    error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\n                                }\n                            }\n                        });\n                        _this.awaitingPromises.push(promise);\n                    }\n                    else {\n                        if (!validatedValue) {\n                            var _a = _this.createValidationError(object, value, metadata, customConstraintMetadata), type = _a[0], message = _a[1];\n                            error.constraints[type] = message;\n                        }\n                    }\n                    return;\n                }\n                // convert set and map into array\n                var arrayValue = convertToArray(value);\n                // Validation needs to be applied to each array item\n                var validatedSubValues = arrayValue.map(function (subValue) {\n                    return customConstraintMetadata.instance.validate(subValue, validationArguments);\n                });\n                var validationIsAsync = validatedSubValues.some(function (validatedSubValue) {\n                    return isPromise(validatedSubValue);\n                });\n                if (validationIsAsync) {\n                    // Wrap plain values (if any) in promises, so that all are async\n                    var asyncValidatedSubValues = validatedSubValues.map(function (validatedSubValue) {\n                        return isPromise(validatedSubValue) ? validatedSubValue : Promise.resolve(validatedSubValue);\n                    });\n                    var asyncValidationIsFinishedPromise = Promise.all(asyncValidatedSubValues).then(function (flatValidatedValues) {\n                        var validationResult = flatValidatedValues.every(function (isValid) { return isValid; });\n                        if (!validationResult) {\n                            var _a = _this.createValidationError(object, value, metadata, customConstraintMetadata), type = _a[0], message = _a[1];\n                            error.constraints[type] = message;\n                            if (metadata.context) {\n                                if (!error.contexts) {\n                                    error.contexts = {};\n                                }\n                                error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\n                            }\n                        }\n                    });\n                    _this.awaitingPromises.push(asyncValidationIsFinishedPromise);\n                    return;\n                }\n                var validationResult = validatedSubValues.every(function (isValid) { return isValid; });\n                if (!validationResult) {\n                    var _b = _this.createValidationError(object, value, metadata, customConstraintMetadata), type = _b[0], message = _b[1];\n                    error.constraints[type] = message;\n                }\n            });\n        });\n    };\n    ValidationExecutor.prototype.nestedValidations = function (value, metadatas, errors) {\n        var _this = this;\n        if (value === void 0) {\n            return;\n        }\n        metadatas.forEach(function (metadata) {\n            var _a;\n            if (metadata.type !== ValidationTypes.NESTED_VALIDATION && metadata.type !== ValidationTypes.PROMISE_VALIDATION) {\n                return;\n            }\n            if (value instanceof Array || value instanceof Set || value instanceof Map) {\n                // Treats Set as an array - as index of Set value is value itself and it is common case to have Object as value\n                var arrayLikeValue = value instanceof Set ? Array.from(value) : value;\n                arrayLikeValue.forEach(function (subValue, index) {\n                    _this.performValidations(value, subValue, index.toString(), [], metadatas, errors);\n                });\n            }\n            else if (value instanceof Object) {\n                var targetSchema = typeof metadata.target === 'string' ? metadata.target : metadata.target.name;\n                _this.execute(value, targetSchema, errors);\n            }\n            else {\n                var error = new ValidationError();\n                error.value = value;\n                error.property = metadata.propertyName;\n                error.target = metadata.target;\n                var _b = _this.createValidationError(metadata.target, value, metadata), type = _b[0], message = _b[1];\n                error.constraints = (_a = {},\n                    _a[type] = message,\n                    _a);\n                errors.push(error);\n            }\n        });\n    };\n    ValidationExecutor.prototype.mapContexts = function (object, value, metadatas, error) {\n        var _this = this;\n        return metadatas.forEach(function (metadata) {\n            if (metadata.context) {\n                var customConstraint = void 0;\n                if (metadata.type === ValidationTypes.CUSTOM_VALIDATION) {\n                    var customConstraints = _this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls);\n                    customConstraint = customConstraints[0];\n                }\n                var type = _this.getConstraintType(metadata, customConstraint);\n                if (error.constraints[type]) {\n                    if (!error.contexts) {\n                        error.contexts = {};\n                    }\n                    error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\n                }\n            }\n        });\n    };\n    ValidationExecutor.prototype.createValidationError = function (object, value, metadata, customValidatorMetadata) {\n        var targetName = object.constructor ? object.constructor.name : undefined;\n        var type = this.getConstraintType(metadata, customValidatorMetadata);\n        var validationArguments = {\n            targetName: targetName,\n            property: metadata.propertyName,\n            object: object,\n            value: value,\n            constraints: metadata.constraints,\n        };\n        var message = metadata.message || '';\n        if (!metadata.message &&\n            (!this.validatorOptions || (this.validatorOptions && !this.validatorOptions.dismissDefaultMessages))) {\n            if (customValidatorMetadata && customValidatorMetadata.instance.defaultMessage instanceof Function) {\n                message = customValidatorMetadata.instance.defaultMessage(validationArguments);\n            }\n        }\n        var messageString = ValidationUtils.replaceMessageSpecialTokens(message, validationArguments);\n        return [type, messageString];\n    };\n    ValidationExecutor.prototype.getConstraintType = function (metadata, customValidatorMetadata) {\n        var type = customValidatorMetadata && customValidatorMetadata.name ? customValidatorMetadata.name : metadata.type;\n        return type;\n    };\n    return ValidationExecutor;\n}());\nexport { ValidationExecutor };\n//# sourceMappingURL=ValidationExecutor.js.map","/**\n * Convert Map, Set to Array\n */\nexport function convertToArray(val) {\n    if (val instanceof Map) {\n        return Array.from(val.values());\n    }\n    return Array.isArray(val) ? val : Array.from(val);\n}\n//# sourceMappingURL=convert-to-array.util.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ValidationExecutor } from './ValidationExecutor';\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nvar Validator = /** @class */ (function () {\n    function Validator() {\n    }\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     */\n    Validator.prototype.validate = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    };\n    /**\n     * Performs validation of the given object based on decorators or validation schema and reject on error.\n     */\n    Validator.prototype.validateOrReject = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var errors;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions)];\n                    case 1:\n                        errors = _a.sent();\n                        if (errors.length)\n                            return [2 /*return*/, Promise.reject(errors)];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     */\n    Validator.prototype.validateSync = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        var object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n        var options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n        var schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n        var executor = new ValidationExecutor(this, options);\n        executor.ignoreAsyncValidations = true;\n        var validationErrors = [];\n        executor.execute(object, schema, validationErrors);\n        return executor.stripEmptyErrors(validationErrors);\n    };\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     * Common method for `validateOrReject` and `validate` methods.\n     */\n    Validator.prototype.coreValidate = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        var object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n        var options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n        var schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n        var executor = new ValidationExecutor(this, options);\n        var validationErrors = [];\n        executor.execute(object, schema, validationErrors);\n        return Promise.all(executor.awaitingPromises).then(function () {\n            return executor.stripEmptyErrors(validationErrors);\n        });\n    };\n    return Validator;\n}());\nexport { Validator };\n//# sourceMappingURL=Validator.js.map","/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nvar defaultContainer = new (/** @class */ (function () {\n    function class_1() {\n        this.instances = [];\n    }\n    class_1.prototype.get = function (someClass) {\n        var instance = this.instances.find(function (instance) { return instance.type === someClass; });\n        if (!instance) {\n            instance = { type: someClass, object: new someClass() };\n            this.instances.push(instance);\n        }\n        return instance.object;\n    };\n    return class_1;\n}()))();\nvar userContainer;\nvar userContainerOptions;\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer, options) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer(someClass) {\n    if (userContainer) {\n        try {\n            var instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n        }\n        catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get(someClass);\n}\n//# sourceMappingURL=container.js.map","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import { validate } from \"class-validator\";\nimport { get, writable, Writable } from \"svelte/store\";\nimport { FieldConfig } from \"./FieldConfig\";\nimport { Form } from \"./Form\";\nimport {\n  Callback,\n  LinkOnEvent,\n  LinkValuesOnEvent,\n  OnEvents,\n  ValidationCallback,\n  ValidationError,\n} from \"./types\";\n\n//#region Utility Functions\n\n// Get the form field by name\nexport function _get(name: string, fields: FieldConfig[]): FieldConfig {\n  return fields.filter((f) => f.name === name)[0];\n}\n\n/**\n *\n * Build the field configs from this.model using metadata-reflection.\n * More comments inside...\n */\nexport function _buildFormFields(\n  model: any,\n  // Grab the editableProperties from the @field decorator\n  props: string[] = Reflect.getMetadata(\"editableProperties\", model)\n): FieldConfig[] {\n  // Grab the editableProperties from the @field decorator\n  // let props: string[] = Reflect.getMetadata(\"editableProperties\", model);\n\n  // Map the @field fields to the form.fields array.\n  const fields = props.map((prop: string) => {\n    // Get the FieldConfig using metadata reflection\n    const field: FieldConfig = new FieldConfig({\n      ...Reflect.getMetadata(\"fieldConfig\", model, prop),\n      name: prop,\n    });\n\n    // If the model has a value, attach it to the field config\n    // 0, \"\", [], etc. are set in the constructor based on type.\n    if (model[prop]) {\n      field.setInitialValue(model[prop]);\n    }\n\n    // We made it. Return the field config and let's generate some inputs!\n    return field;\n  });\n  return fields;\n}\n\nexport function _getRequiredFieldNames(fields: FieldConfig[]): string[] {\n  let required_field_names: string[] = [];\n  fields.forEach((f) => {\n    if (f.required) {\n      required_field_names.push(f.name);\n    }\n  });\n  return required_field_names;\n}\n\nexport function _setValueChanges(\n  changes: Writable<Record<string, any>>,\n  field: FieldConfig\n) {\n  const _changes = get(changes);\n\n  // The change is on the same field\n  if (_changes[field.name]) {\n    _changes[field.name] = get(field.value);\n    changes.set({ ..._changes });\n  } else {\n    // Change is on a different field\n    changes.set({ ..._changes, [field.name]: get(field.value) });\n  }\n}\n\n//#endregion\n\n//#region HTML Event Helpers\n\nexport function _attachEventListeners(\n  field: FieldConfig,\n  on_events: OnEvents,\n  callback: Function\n): void {\n  Object.entries(on_events).forEach(([eventName, shouldListen]) => {\n    // If shouldListen true, then add the event listener\n    if (shouldListen) {\n      field.node.addEventListener(eventName, (e: Event) => callback(e), false);\n    }\n  });\n}\n\nexport function _attachOnClearErrorEvents(\n  node: HTMLElement,\n  clear_errors_on_events: OnEvents,\n  callback?: Function\n): void {\n  Object.entries(clear_errors_on_events).forEach(\n    ([eventName, shouldListen]) => {\n      // If the OnEvent is true, then add the event listener\n      if (shouldListen) {\n        node.addEventListener(eventName, (e: Event) => callback(e), false);\n      }\n    }\n  );\n}\n\n//#endregion\n\n//#region Linking Utilities\n\n/**\n * Better performance in place of model/field data sync integrity\n */\nfunction _linkFieldValues<ModelType extends Object>(\n  field: FieldConfig,\n  model: ModelType\n): void {\n  model[field.name] = get(field.value);\n}\n\n// Link values from FIELDS toMODEL or MODEL to FIELDS\nexport function _linkValues<ModelType extends Object>(\n  fromFieldsToModel: boolean,\n  fields: FieldConfig[],\n  model: ModelType\n): void {\n  // Still the fastest way i've seen to loop in JS.\n  let i = 0,\n    len = fields.length;\n  for (; len > i; ++i) {\n    // Get name and value of the field\n    const name = fields[i].name,\n      val = fields[i].value;\n    if (fromFieldsToModel) {\n      // Link field values to the model\n      model[name] = get(val);\n    } else {\n      // Link model values to the fields\n      val.set(model[name]);\n    }\n  }\n}\n\n/**\n * Currently this depends on class-validator.\n * TODO: Disconnect class-validator dependency from all functions\n */\nexport function _linkFieldErrors(\n  errors: ValidationError[],\n  field: FieldConfig,\n  filter_term: keyof ValidationError // TODO: Create special validation error Type\n): void {\n  const error = errors.filter((e) => e[filter_term] === field.name);\n  // Check if there's an error for the field\n  if (error && error.length > 0) {\n    field.errors.set(error[0]);\n  } else {\n    field.errors.set(null);\n  }\n}\n\nexport function _linkErrors(\n  errors: ValidationError[],\n  fields: FieldConfig[]\n): void {\n  errors.forEach((err) => {\n    const f = _get(err.property, fields);\n    f.errors.set(err);\n  });\n}\n\nexport function _hanldeValueLinking<T extends Object>(\n  link_fields_to_model: LinkOnEvent,\n  all_fields_or_just_one: LinkValuesOnEvent,\n  model: T,\n  fields: FieldConfig[],\n  field?: FieldConfig\n): void {\n  const checkAllFieldLink = () => {\n    if (all_fields_or_just_one === \"all\" || !field) {\n      _linkValues(true, fields, model);\n    } else if (all_fields_or_just_one === \"field\") {\n      _linkFieldValues(field, model);\n    }\n  };\n  /**\n   * Link the input from the field to the model.\n   * We aren't linking (only) the field value.\n   * We link all values just in case the field change propigates other field changes.\n   */\n  if (link_fields_to_model === \"always\") {\n    checkAllFieldLink();\n  } else if (link_fields_to_model === \"valid\") {\n    checkAllFieldLink();\n  }\n}\n\n//#endregion\n\n//#region Validation Helpers\n\nfunction _handleValidationCallbacks(\n  when: \"before\" | \"after\",\n  callbacks?: ValidationCallback[]\n) {\n  if (callbacks) {\n    callbacks.forEach((cb) => {\n      if (cb.when === when) {\n        () => cb.callback();\n      }\n    });\n  }\n}\n\n/**\n * This is used to add functions and callbacks to the OnEvent\n * handler. Functions can be added in a plugin-style manner now.\n */\n export function _executeFunctions(funcs: Callback | Callback[]) {\n  if (Array.isArray(funcs)) {\n    funcs.forEach((func) => {\n      // () => func();\n      func();\n    });\n  } else {\n    funcs();\n    // () => funcs();\n  }\n}\n\nfunction _executeIfTrue(is_true: boolean, cb: Callback) {\n  if (is_true) {\n    // () => cb();\n    cb();\n  }\n}\n\n/**\n * Hanlde the events that will fire for each field.\n * Corresponds to the form.on_events field.\n *\n * TODO: Add plugin area, hoist-er\n */\nexport function _handleValidationEvent<T extends Object>(\n  form: Form<T>,\n  required_fields: string[],\n  stateful_items: string[],\n  initial_state_str: string,\n  field_names: string[],\n  field?: FieldConfig,\n  callbacks?: ValidationCallback[]\n): Promise<ValidationError[]> {\n  _executeFunctions([\n    /**\n     * Link the input from the field to the model.\n     * We aren't linking (only) the field value.\n     * We link all values just in case the field change propigates other field changes.\n     */\n    () =>\n      _hanldeValueLinking(\n        form.link_fields_to_model,\n        form.performance_options.link_all_values_on_event,\n        form.model,\n        form.fields,\n        field\n      ),\n    () =>\n      _executeIfTrue(\n        Boolean(field) && form.performance_options.enable_change_detection,\n        () => _setValueChanges(form.value_changes, field)\n      ),\n    () => _handleValidationCallbacks(\"before\", callbacks),\n  ]);\n\n  return validate(form.model, form.validation_options)\n    .then((errors: ValidationError[]) => {\n      return _handleFormValidation(form, errors, required_fields, field);\n    })\n    .then((errors: ValidationError[]) => {\n      _executeFunctions([\n        () =>\n          _executeIfTrue(\n            form.performance_options.enable_hidden_fields_detection,\n            () => _hideFields(form.hidden_fields, field_names, form.fields)\n          ),\n        () =>\n          _executeIfTrue(\n            form.performance_options.enable_disabled_fields_detection,\n            () => _disableFields(form.disabled_fields, field_names, form.fields)\n          ),\n        () =>\n          _executeIfTrue(form.performance_options.enable_change_detection, () =>\n            _hasStateChanged(form, stateful_items, initial_state_str)\n          ),\n        () => _handleValidationCallbacks(\"after\", callbacks),\n      ]);\n      return errors;\n    });\n}\n\n/**\n * Handle all the things associated with validation!\n * Link the errors to the fields.\n * Check if all required fields are valid.\n * Link values from fields to model if\n * form.link_fields_to_model === LinkOnEvent.Valid is true.\n */\nexport async function _handleFormValidation<T extends Object>(\n  form: Form<T>,\n  errors: ValidationError[],\n  required_fields: string[],\n  field?: FieldConfig\n): Promise<ValidationError[]> {\n  // There are errors!\n  if (errors && errors.length > 0) {\n    // console.log(errors);\n\n    form.errors = errors;\n\n    // Are we validating the whole form or just the fields?\n    if (field && field !== null) {\n      // Link errors to field (to show validation errors)\n      _linkFieldErrors(errors, field, \"property\");\n    } else {\n      // This is validatino for the whole form!\n      _linkErrors(errors, form.fields);\n    }\n\n    // All required fields are valid?\n    if (_requiredFieldsValid(errors, required_fields)) {\n      form.valid.set(true);\n    } else {\n      form.valid.set(false);\n    }\n    return errors;\n  } else {\n    // We can't get here unless the errors we see are for non-required fields\n\n    // If the config tells us to link the values only when the form\n    // is valid, then link them here.\n    _hanldeValueLinking(\n      form.link_fields_to_model,\n      form.performance_options.link_all_values_on_event,\n      form.model,\n      form.fields,\n      field\n    );\n    form.clearErrors(); // Clear form errors\n    form.valid.set(true); // Form is valid!\n    return errors;\n  }\n}\n\n/**\n * TODO: Clean up this arfv implementation. Seems too clunky.\n *\n * Check if there are any required fields in the errors.\n * If there are no required fields in the errors, the form is valid\n */\nexport function _requiredFieldsValid(\n  errors: ValidationError[],\n  required_fields: string[]\n): boolean {\n  if (errors.length === 0) return true;\n  // Go ahead and return if there are no errors\n  let i = 0,\n    len = required_fields.length;\n  // If there are no required fields, just go ahead and return\n  if (len === 0) return true;\n  // Otherwise we have to map the names of the errors so we can\n  // check if they're for a required field\n  const errs = errors.map((e) => e.property);\n  for (; len > i; ++i) {\n    if (errs.indexOf(required_fields[i]) !== -1) {\n      return false;\n    }\n    // if (errs.includes(required_fields[i])) {\n    //   return false;\n    // }\n  }\n  return true;\n}\n\n//#endregion\n\n//#region - Form State\n\n// Returns a string of the current state\nexport function _getStateSnapshot<T extends Object>(\n  form: Form<T>,\n  stateful_items: string[]\n): string {\n  let i = 0,\n    len = stateful_items.length,\n    result = {};\n  for (; len > i; ++i) {\n    const item = stateful_items[i];\n    result[item] = form[item];\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Is the current form state different than the initial state?\n *\n * I've tested it with > 1000 fields in a single class with very slight input lag.\n */\nexport function _hasStateChanged<T extends Object>(\n  form: Form<T>,\n  stateful_items: string[],\n  initial_state_str: string\n): void {\n  if (_getStateSnapshot(form, stateful_items) === initial_state_str) {\n    form.changed.set(false);\n    return;\n  }\n  form.changed.set(true);\n}\n\n// Clears everything before being destoryed.\nexport function _clearState<T extends Object>(\n  form: Form<T>,\n  initial_state: any,\n  required_fields: string[]\n): void {\n  form.model = undefined;\n  initial_state = {};\n  required_fields = [];\n  form.refs = null;\n  form.template = null;\n}\n\n/**\n * Grab a snapshot of several items that generally define the state of the form\n * and serialize them into a format that's easy-ish to check/deserialize (for resetting)\n */\nexport function _setInitialState<T extends Object>(\n  form: Form<T>,\n  stateful_items: string[],\n  initial_state: any,\n  initial_state_str: string\n): void {\n  /**\n   * This is the best method for reliable deep-ish cloning that I've found.\n   * If you know a BETTER way, be my guest. No extra dependencies please.\n   */\n  stateful_items.forEach((key) => {\n    if (key === \"valid\" || key === \"touched\" || key === \"changed\") {\n      get(form[key])\n        ? (initial_state[key] = writable(true))\n        : (initial_state[key] = writable(false));\n    } else if (key === \"changes\") {\n      initial_state[key] = writable(get(form.value_changes));\n    } else {\n      initial_state[key] = JSON.parse(JSON.stringify(form[key]));\n    }\n    initial_state_str = JSON.stringify(initial_state);\n  });\n}\n\n/**\n * This one's kinda harry.\n * But it resets the form to it's initial state.\n */\nexport function _resetState<T extends Object>(\n  form: Form<T>,\n  stateful_items: string[],\n  initial_state: any\n): void {\n  stateful_items.forEach((key) => {\n    if (key === \"valid\" || key === \"touched\" || key === \"changed\") {\n      // Check the inital_state's key\n      get(initial_state[key]) ? form[key].set(true) : form[key].set(false);\n    } else if (key === \"errors\") {\n      // Clear the errors so we don't have leftovers all over the place\n      form.clearErrors();\n      // Attach errors located in initial_state (to form.errors)\n      form.errors = initial_state.errors.map((e) => {\n        // Create new ValidationError to match the class-validator error type\n        let err = new ValidationError();\n        Object.assign(err, e);\n        return err;\n      });\n      // If this.errors is not empty then attach the errors to the fields\n      if (form.errors && form.errors.length > 0) {\n        _linkErrors(form.errors, form.fields);\n      }\n    } else if (key === \"model\") {\n      /**\n       * We have to disconnect the initial_state's model so that we don't get\n       * burned by reference links.\n       * We also don't want to overwrite the actual model, because it contains\n       * all the metadata for validation, feilds, etc.\n       * So we just copy the inital_state[model] and shove it's values back into\n       * this.model.\n       * That way when we reset the form, we still get validation errors from the\n       * model's decorators.\n       */\n      const model_state = JSON.parse(JSON.stringify(initial_state[key]));\n      Object.keys(form[key]).forEach((mkey) => {\n        // It has a hard time with blank strings.\n        form[key][mkey] = model_state[mkey];\n      });\n      _linkValues(false, form.fields, form.model);\n    } else if (key === \"changes\") {\n      // Reset form value changes!\n      if (get(initial_state[key]) === {}) {\n        form.value_changes.set({});\n      } else {\n        form.value_changes.set(get(initial_state[key]));\n      }\n    } else {\n      form[key] = JSON.parse(JSON.stringify(initial_state[key]));\n    }\n  });\n}\n\n//#endregion\n\n//#region - Styling\n\n/**\n * Using this.field_order, rearrange the order of the fields.\n */\nexport function _createOrder(\n  field_order: string[],\n  fields: FieldConfig[]\n): FieldConfig[] {\n  let newLayout: FieldConfig[] = [];\n  let leftovers: FieldConfig[] = [];\n  // Loop over the order...\n  field_order.forEach((name) => {\n    const field = _get(name, fields);\n    // If the field.name and the order name match...\n    if (\n      field.name === name ||\n      (field.group && field.group.name === name) ||\n      (field.step && `${field.step.index}` === name)\n    ) {\n      // Then push it to the fields array\n      newLayout.push(field);\n    } else if (\n      leftovers.indexOf(field) === -1 &&\n      field_order.indexOf(field.name) === -1\n    ) {\n      // Field is not in the order, so push it to bottom of order.\n      leftovers.push(field);\n    }\n  });\n  fields = [...newLayout, ...leftovers];\n  return fields;\n}\n\nexport function _hideFields(\n  hidden_fields: string[],\n  field_names: string[],\n  fields: FieldConfig[]\n) {\n  let i = 0,\n    len = hidden_fields.length;\n  if (len === 0) return;\n  for (; len > i; ++i) {\n    const field = hidden_fields[i],\n      field_index = field_names.indexOf(field);\n\n    if (field_index !== -1) {\n      _hideField(field_names[field_index], fields);\n    }\n  }\n}\n\nexport function _hideField(name: string, fields: FieldConfig[]) {\n  const f = _get(name, fields);\n  f.hidden = true;\n}\n\nexport function _disableFields(\n  disabled_fields: string[],\n  field_names: string[],\n  fields: FieldConfig[]\n) {\n  let i = 0,\n    len = disabled_fields.length;\n  if (len === 0) return;\n  for (; len > i; ++i) {\n    const field = disabled_fields[i],\n      field_index = field_names.indexOf(field);\n    if (field_index !== -1) {\n      _disableField(field_names[field_index], fields);\n    }\n  }\n}\n\nexport function _disableField(name: string, fields: FieldConfig[]) {\n  const f = _get(name, fields);\n  f.disabled = true;\n  f.attributes[\"disabled\"] = true;\n}\n\n//#endregion\n","import { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container';\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n    if (typeof schemaNameOrObject === 'string') {\n        return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    else {\n        return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions);\n    }\n}\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n    if (typeof schemaNameOrObject === 'string') {\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    else {\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);\n    }\n}\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n    if (typeof schemaNameOrObject === 'string') {\n        return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    else {\n        return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);\n    }\n}\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema) {\n    getMetadataStorage().addValidationSchema(schema);\n}\n//# sourceMappingURL=index.js.map","import { ValidatorOptions } from \"class-validator/types\";\n// import { validateOrReject } from \"class-validator\";\nimport { get, writable, Writable } from \"svelte/store\";\nimport { FieldConfig } from \".\";\nimport {\n  OnEvents,\n  LinkOnEvent,\n  RefData,\n  PerformanceOptions,\n  ValidationError,\n  ValidationCallback,\n} from \"./types\";\nimport {\n  _buildFormFields,\n  _getRequiredFieldNames,\n  _get,\n  _attachEventListeners,\n  _attachOnClearErrorEvents,\n  _linkFieldErrors,\n  _linkErrors,\n  _linkValues,\n  _requiredFieldsValid,\n  _getStateSnapshot,\n  _hasStateChanged,\n  _hideFields,\n  _disableFields,\n  _createOrder,\n  _clearState,\n  _setInitialState,\n  _resetState,\n  _handleFormValidation,\n  _handleValidationEvent,\n  _executeFunctions,\n} from \"./internal\";\n\n/**\n * Formvana - Form Class\n * Form is NOT valid, initially.\n * If you want to make it valid, this.valid.set(true).\n *\n * The main thing to understand here is that the fields and the model are separate.\n * Fields are built using the model, via the @field() & @editable() decorators.\n * We keep the fields and the model in sync (simply) via model property names\n * which are mapped to field.name.\n * We do our best to initialize this thing with good, sane defaults without\n * adding too many restrictions.\n *\n *\n * Recommended Use:\n *  - Initialize let form = new Form(model, {refs: REFS, template: TEMPLATE, etc.})\n *  - Set the model (if you didn't in the first step)\n *  - Attach reference data (if you didn't in the first step)\n *  - Storify the form - check example.form.ts for an example\n *  - Now you're ready to use the form!\n *  - Pass it into the DynamicForm component and let the form generate itself!\n *\n * Note: You will probably have to use form and field templates as this lib only comes\n * with default html form layout & fields.\n *\n * Performance is blazing with < 500 fields.\n * Can render up to 2000 inputs in per class/fields.\n * Just break it up into 100 or so fields per form (max 250) if its a huge form.\n *  - Tested on late 2014 mbp - 2.5ghz core i7, 16gb ram\n *\n * TODO: Decouple class-validator as to allow validation to be plugin based\n * TODO: Create easy component/pattern for field groups and stepper/wizzard\n * TODO: Create plugin base for form template styling\n *\n * TODO: Allow fields, model and validator to be passed in separately.\n *  - This will allow for a more \"dynamic\" form building experience\n */\nexport class Form<ModelType extends Object> {\n  constructor(model: ModelType, init?: Partial<Form<ModelType>>) {\n    if (init) {\n      Object.keys(this).forEach((key) => {\n        if (init[key]) {\n          this[key] = init[key];\n        }\n      });\n    }\n    // If there's a model, set the inital state's and build the fields\n    if (model) {\n      this.model = model;\n      this.buildFields();\n    } else {\n      throw new Error(\"Model is not valid. Please pass in a valid model.\");\n    }\n    // If they passed in a field order, set the order.\n    if (this.field_order && this.field_order.length > 0) {\n      this.setOrder(this.field_order);\n    }\n    // Well well, reference data. Better attach that to the fields.\n    if (this.refs) {\n      this.attachRefData();\n    }\n\n    if (this.disabled_fields && this.disabled_fields.length > 0) {\n      _disableFields(this.disabled_fields, this.field_names, this.fields);\n    }\n\n    if (this.hidden_fields && this.hidden_fields.length > 0) {\n      _hideFields(this.hidden_fields, this.field_names, this.fields);\n    }\n\n    // Wait until everything is initalized then set the inital state.\n    _setInitialState(\n      this,\n      this.stateful_items,\n      this.initial_state,\n      this.initial_state_str\n    );\n  }\n\n  //#region ** Fields **\n\n  //#region Core Functionality Fields\n\n  /**\n   * This is your form Model/Schema.\n   *\n   * (If you didn't set the model in the constructor)\n   * When model is set, call buildFields() to build the fields.\n   */\n  model: ModelType;\n\n  /**\n   * Fields are built from the model's metadata using reflection.\n   * If model is set, call buildFields().\n   */\n  fields: FieldConfig[] = [];\n\n  /**\n   * refs hold any reference data you'll be using in the form\n   * e.g. seclet dropdowns, radio buttons, etc.\n   *\n   * If you did not set the model in constructor:\n   * Call attachRefData() to link the data to the respective field\n   *\n   * * Fields & reference data are linked via field.ref_key\n   */\n  refs: RefData = {};\n\n  /**\n   * TODO: Decouple class-validator/allow other validators!\n   * TODO: Change this to a custom type that takes the type of validator\n   * TODO: and the validators options. This will help decouple\n   *\n   * Validation options come from class-validator ValidatorOptions.\n   *\n   * Biggest perf increase comes from setting validationError.target = false\n   * (so the whole model is not attached to each error message)\n   */\n  readonly validation_options: ValidatorOptions = {\n    skipMissingProperties: false,\n    whitelist: false,\n    forbidNonWhitelisted: false,\n    dismissDefaultMessages: false,\n    groups: [],\n    validationError: {\n      target: false,\n      value: false,\n    },\n    forbidUnknownValues: true,\n    stopAtFirstError: false,\n  };\n\n  /**\n   * The errors are of type ValidationError which comes from class-validator.\n   * Errors are usually attached to the fields which the error is for.\n   * This pattern adds flexibility at the cost of a little complexity.\n   */\n  errors: ValidationError[] = [];\n\n  /**\n   * These next properties are all pretty self-explanatory.\n   *\n   * this.valid is a svelte store so we can change the state of the variable\n   * inside of the class and it (the change) will be reflected\n   * in the external form context.\n   */\n  valid: Writable<boolean> = writable(false);\n  loading: Writable<boolean> = writable(false);\n  changed: Writable<boolean> = writable(false);\n  touched: Writable<boolean> = writable(false);\n\n  /**\n   * Emits value changes as a plain JS object.\n   * Format: { [field.name]: value }\n   *\n   * Similar to Angular form.valueChanges\n   */\n  value_changes: Writable<Record<string, any>> = writable({});\n\n  /**\n   * Use the NAME of the field (field.name) to disable/hide the field.\n   */\n  hidden_fields: string[] = [];\n  disabled_fields: string[] = [];\n\n  /**\n   * Which events should the form do things on?\n   * (validate, link values, hide/disable fields)\n   */\n  readonly on_events: OnEvents = new OnEvents();\n  // Which events should we clear the field errors on?\n  readonly clear_errors_on_events: OnEvents = new OnEvents({}, true);\n\n  // When to link this.field values to this.model values\n  readonly link_fields_to_model: LinkOnEvent = \"always\";\n\n  //#endregion\n\n  //#region Field Styling\n\n  /**\n   * Determines the ordering of this.fields.\n   * Simply an array of field names (or group names or stepper names)\n   * in the order to be displayed\n   */\n  field_order: string[] = [];\n\n  /**\n   * Form Template Layout\n   *\n   * Render the form into a custom svelte template!\n   * Use a svelte component.\n   * * The component/template must accept {form} prop\n   *\n   * Note: add ` types\": [\"svelte\"] ` to tsconfig compilerOptions\n   * to remove TS import error of .svelte files (for your template)\n   */\n  template: any = null;\n\n  //#endregion\n\n  //#region Internal Fields\n\n  // Used to make checking for disabled/hidden fields faster\n  private field_names: string[] = [];\n  /**\n   * This is the model's initial state.\n   * Shove the stateful_items into the inital state for a decent snapshot.\n   */\n  private initial_state: any = {};\n  private initial_state_str: string = \"\";\n  private stateful_items = [\n    \"valid\",\n    \"touched\",\n    \"changed\",\n    \"changes\",\n    \"errors\",\n    \"required_fields\",\n    \"refs\",\n    \"field_order\",\n    \"model\",\n    \"hidden_fields\",\n    \"disabled_fields\",\n  ];\n\n  /**\n   * We keep track of required fields because we let class-validator handle everything\n   * except *required* (field.required)\n   * So if there are no required fields, but there are errors, the form is still\n   * valid. This is the mechanism to help keep track of that.\n   * Keep track of the fields so we can validate faster.\n   */\n  private required_fields: string[] = [];\n\n  /**\n   * High Performance options!\n   * Use these if you're trying to handle upwards of 1000+ inputs within a given model.\n   *\n   * link_all_values_on_event - we usually link all field values to the model on\n   * each event call. If set to false, we only link the field affected in the OnEvent\n   * which saves us iterating over each field and linking it to the model.\n   */\n  performance_options: Partial<PerformanceOptions> = {\n    link_all_values_on_event: \"all\",\n    enable_hidden_fields_detection: true,\n    enable_disabled_fields_detection: true,\n    enable_change_detection: true,\n  };\n\n  //#endregion\n\n  //#endregion ^^ Fields ^^\n\n  //#region ** Form API **\n\n  //#region - Form Setup\n\n  /**\n   * Build the field configs via this.model using metadata-reflection.\n   */\n  private buildFields = (model = this.model): void => {\n    this.fields = _buildFormFields(model);\n    // Set the field names for faster searching\n    //(instead of mapping the names (potentially) each keystoke)\n    this.field_names = this.fields.map((f) => f.name);\n    this.required_fields = _getRequiredFieldNames(this.fields);\n  };\n\n  /**\n   * ATTACH TO SAME ELEMENT AS FIELD.NAME!\n   *\n   * Use on the element that will be interacted with.\n   * e.g. <input/> -- <button/> -- <select/> -- etc.\n   * Check examples folder for more details.\n   *\n   * * This hooks up the event listeners!\n   *\n   * This is for Svelte's \"use:FUNCTION\" feature.\n   * The \"use\" directive passes the HTML Node as a parameter\n   * to the given function (e.g. use:useField(node: HTMLElement)).\n   */\n  useField = (node: HTMLElement & { name: string }): void => {\n    // Attach HTML Node to field so we can remove event listeners later\n    const field = _get(node.name, this.fields);\n    field.node = node;\n\n    _attachEventListeners(field, this.on_events, (e: Event) =>\n      _handleValidationEvent(\n        this,\n        this.required_fields,\n        this.stateful_items,\n        this.initial_state_str,\n        this.field_names,\n        field\n      )\n    );\n    _attachOnClearErrorEvents(node, this.clear_errors_on_events, (e: Event) => {\n      field.errors.set(null);\n    });\n  };\n\n  /**\n   * Load new data into the form and build the fields.\n   * Useful if you fetched data and need to update the form values.\n   *\n   * ReInit defaults to True. So the default is to pass in a new instance\n   * of the model (e.g. new ExampleMode(incoming_data)).\n   * If fresh is False then the incoming_data will be serialized into\n   * the model.\n   *\n   * State is updated upon data load, by default.\n   *\n   * Check example.form.ts for an example use case.\n   */\n  loadData = <T extends ModelType>(\n    data: T,\n    re_init: boolean = true,\n    update_initial_state: boolean = true\n  ): Form<ModelType> => {\n    if (re_init) {\n      this.model = data;\n      this.buildFields();\n    } else {\n      Object.keys(this.model).forEach((key) => {\n        this.model[key] = data[key];\n      });\n      _linkValues(false, this.fields, this.model);\n    }\n\n    if (update_initial_state) this.updateInitialState();\n\n    return this;\n  };\n\n  /**\n   * Just pass in the reference data and let the field configs do the rest.\n   *\n   * * Ref data MUST BE in format: Record<string, RefDataItem[]>\n   */\n  attachRefData = (refs?: RefData): void => {\n    const fields_with_ref_keys = this.fields.filter((f) => f.ref_key);\n    if (refs) {\n      fields_with_ref_keys.forEach((field) => {\n        if (field.ref_key) field.options = refs[field.ref_key];\n      });\n    } else if (this.refs) {\n      fields_with_ref_keys.forEach((field) => {\n        if (field.ref_key) field.options = this.refs[field.ref_key];\n      });\n    }\n  };\n\n  /**\n   * Can attach event listeners to one or more fields.\n   *\n   * TODO: Optionaly, attach the _handleValidationEvents function?\n   */\n  addEventListenerToFields = (\n    event: keyof HTMLElementEventMap,\n    callback: ((...args: any) => void) | (() => void),\n    field_names: string | string[]\n  ): void => {\n    if (Array.isArray(field_names)) {\n      const fields = field_names.map((f) => _get(f, this.fields));\n      fields.forEach((f) => {\n        f.node.addEventListener(event, (e) => callback(e), false);\n      });\n    } else {\n      const field = _get(field_names, this.fields);\n      field.node.addEventListener(event, (e) => callback(e), false);\n    }\n  };\n  //#endregion\n\n  //#region - Validation\n\n  /**\n   * Well, validate the form!\n   * Clear the errors first, then do it, obviously.\n   * Can also link fields values to model.\n   * Can also hide or disable fields before validation.\n   */\n  validate = (callbacks?: ValidationCallback[]): Promise<ValidationError[]> => {\n    return _handleValidationEvent(\n      this,\n      this.required_fields,\n      this.stateful_items,\n      this.initial_state_str,\n      this.field_names,\n      null,\n      callbacks\n    );\n    // _executeFunctions([\n    //   this.clearErrors(),\n    //   // Link the input from the field to the model.\n    //   this.link_fields_to_model === LinkOnEvent.Always &&\n    //     _linkValues(true, this.fields, this.model),\n    //   _hideFields(this.hidden_fields, this.field_names, this.fields),\n    //   _disableFields(this.disabled_fields, this.field_names, this.fields),\n    //   () => {\n    //     if (useAs === \"plugin\") {\n    //       () => withCb();\n    //     }\n    //   },\n    // ]);\n\n    // Return class-validator validate() function.\n    // Validate the model with given validation config.\n    // return validate(this.model, this.validation_options).then(\n    //   (errors: ValidationError[]) => {\n    //     _handleFormValidation(this, errors, this.required_fields);\n    //     return errors;\n    //   }\n    // );\n  };\n\n  validateAsync = async (): Promise<void> => {\n    // _executeFunctions([\n    //   this.clearErrors(),\n    //   // Link the input from the field to the model.\n    //   this.link_fields_to_model === \"always\" &&\n    //     _linkValues(true, this.fields, this.model),\n    //   _hideFields(this.hidden_fields, this.field_names, this.fields),\n    //   _disableFields(this.disabled_fields, this.field_names, this.fields),\n    // ]);\n    // try {\n    //   return await validateOrReject(this.model, this.validation_options);\n    // } catch (errors) {\n    //   _handleFormValidation(this, errors, this.required_fields);\n    //   // console.log(\"Errors: \", errors);\n    //   return errors;\n    // }\n  };\n\n  /**\n   * If want to (in)validate a specific field for any reason.\n   */\n  validateField = (field_name: string, withMessage?: string): void => {\n    const field = _get(field_name, this.fields);\n    if (!withMessage) {\n      _handleValidationEvent(\n        this,\n        this.required_fields,\n        this.stateful_items,\n        this.initial_state_str,\n        this.field_names,\n        field\n      );\n    } else {\n      const err = new ValidationError(\n        field_name,\n        { error: withMessage },\n        { value: get(field.value) }\n      );\n      this.errors.push(err);\n      _linkErrors(this.errors, this.fields);\n    }\n  };\n\n  //#endregion\n\n  //#region - Utility Methods\n\n  // Get Field by name\n  get = (field_name: string): FieldConfig => {\n    return _get(field_name, this.fields);\n  };\n\n  /**\n   * Generate a Svelte Store from the current \"this\".\n   */\n  storify = (): Writable<Form<ModelType>> => {\n    const f = writable(this);\n    return f;\n  };\n\n  // Clear ALL the errors.\n  clearErrors = (): void => {\n    this.errors = [];\n    this.fields.forEach((f) => {\n      f.errors.set(null);\n    });\n  };\n\n  /**\n   *! Make sure to call this when the component is unloaded/destroyed\n   * Removes all event listeners and clears the form state.\n   */\n  destroy = (): void => {\n    if (this.fields && this.fields.length > 0) {\n      // For each field...\n      this.fields.forEach((f) => {\n        // Remove all the event listeners!\n        Object.keys(this.on_events).forEach((key) => {\n          f.node.removeEventListener(key, (ev) => {\n            (e: Event) =>\n              _handleValidationEvent(\n                this,\n                this.required_fields,\n                this.stateful_items,\n                this.initial_state_str,\n                this.field_names,\n                f\n              );\n          });\n        });\n        Object.keys(this.clear_errors_on_events).forEach((key) => {\n          f.node.removeEventListener(key, (e) => {\n            f.errors.set(null);\n          });\n        });\n      });\n    }\n    // Reset everything else.\n    _clearState(this, this.initial_state, this.required_fields);\n  };\n\n  //#endregion\n\n  //#region - Form State\n\n  // Resets to the inital state of the form.\n  reset = (): void => {\n    _resetState(this, this.stateful_items, this.initial_state);\n  };\n\n  // Well, this updates the initial state of the form.\n  updateInitialState = (): void => {\n    _setInitialState(\n      this,\n      this.stateful_items,\n      this.initial_state,\n      this.initial_state_str\n    );\n    this.changed.set(false);\n  };\n\n  //#endregion\n\n  //#region - Styling\n\n  /**\n   * Set the field order.\n   * Layout param is simply an array of field (or group)\n   * names in the order to be displayed.\n   * Leftover fields are appended to bottom of form.\n   */\n  setOrder = (order: string[]): void => {\n    this.field_order = order;\n    this.fields = _createOrder(this.field_order, this.fields);\n  };\n\n  /**\n   * Hide a field or fields\n   * @param names? string | string[]\n   */\n  hideFields = (names?: string | string[]) => {\n    if (names) {\n      if (Array.isArray(names)) {\n        this.hidden_fields.push(...names);\n      } else {\n        this.hidden_fields.push(names);\n      }\n    }\n    _hideFields(this.hidden_fields, this.field_names, this.fields);\n  };\n\n  /**\n   * Disable a field or fields\n   * @param names? string | string[]\n   */\n  disableFields = (names?: string | string[]) => {\n    if (names) {\n      if (Array.isArray(names)) {\n        this.disabled_fields.push(...names);\n      } else {\n        this.disabled_fields.push(names);\n      }\n    }\n    _disableFields(this.disabled_fields, this.field_names, this.fields);\n  };\n\n  //#endregion\n\n  //#endregion ^^ Form API ^^\n}\n","import \"reflect-metadata\";\nimport { FieldConfig } from \"./FieldConfig\";\n\nexport function field(config: Partial<FieldConfig>) {\n  return function (target: any, propertyKey: string) {\n    let properties: string[] =\n      Reflect.getMetadata(\"editableProperties\", target) || [];\n\n    if (properties.indexOf(propertyKey) < 0) {\n      properties.push(propertyKey);\n    }\n    Reflect.defineMetadata(\"editableProperties\", properties, target);\n\n    Reflect.defineMetadata(\"fieldConfig\", config, target, propertyKey);\n  };\n}\n\n// export function editable(target: any, propertyKey: string) {\n//   let properties: string[] =\n//     Reflect.getMetadata(\"editableProperties\", target) || [];\n\n//   if (properties.indexOf(propertyKey) < 0) {\n//     properties.push(propertyKey);\n//   }\n\n//   Reflect.defineMetadata(\"editableProperties\", properties, target);\n// }\n"],"names":["noop","get_store_value","store","value","callbacks","unsub","subscribe","unsubscribe","_","subscriber_queue","writable","start","stop","subscribers","set","new_value","b","a","run_queue","length","i","s","push","update","fn","run","invalidate","subscriber","index","indexOf","splice","FieldConfig","[object Object]","init","this","undefined","initial_value","errors","clearValue","clearErrors","Object","assign","selector","template","Error","attributes","type","setInitialValue","options","label","name","ValidationError","model_property_key","property","constraints","keys","forEach","key","OnEvents","disableAll","ValidationMetadata","args","groups","each","context","target","propertyName","constraintCls","validationTypeOptions","validationOptions","message","always","ValidationSchemaToMetadataTransformer","prototype","transform","schema","metadatas","properties","validation","getGlobal","globalThis","global","window","self","isPromise","p","then","MetadataStorage","validationMetadatas","constraintMetadatas","defineProperty","get","enumerable","configurable","addValidationSchema","_this","validationMetadata","addValidationMetadata","metadata","addConstraintMetadata","groupByPropertyName","grouped","getTargetValidationMetadatas","targetConstructor","targetSchema","strictGroups","includeMetadataBecauseOfAlwaysOption","excludeMetadataBecauseOfStrictGroupsOption","originalMetadatas","filter","find","group","uniqueInheritedMetadatas","Function","inheritedMetadata","originalMetadata","concat","getTargetValidatorConstraints","toString","shouldDecorate","hasParent","parentPath","boldStart","boldEnd","propConstraintFailed","join","formattedProperty_1","Number","isInteger","children","map","childError","constructor","ValidationTypes","isValid","CUSTOM_VALIDATION","NESTED_VALIDATION","PROMISE_VALIDATION","CONDITIONAL_VALIDATION","WHITELIST","IS_DEFINED","ValidationUtils","replaceMessageSpecialTokens","validationArguments","messageString","Array","constraint","replace","RegExp","isArray","constraintToString","targetName","ValidationExecutor","validator","validatorOptions","awaitingPromises","ignoreAsyncValidations","metadataStorage","classValidatorMetadataStorage","getMetadataStorage","execute","object","validationErrors","_a","hasValidationMetaData","enableDebugMessages","console","warn","targetMetadatas","groupedMetadatas","forbidUnknownValues","validationError","unknownValue","whitelist","definedMetadatas","Promise","resolvedValue","performValidations","notAllowedProperties","forbidNonWhitelisted","generateValidationError","stripEmptyErrors","error","customValidationMetadatas","nestedValidationMetadatas","conditionalValidationMetadatas","conditionalValidations","customValidations","mapContexts","skipUndefinedProperties","skipNullProperties","skipMissingProperties","nestedValidations","reduce","resultA","resultB","customConstraintMetadata","async","stopAtFirstError","Set","Map","val","validatedSubValues","from","values","subValue","instance","validate","some","validatedSubValue","asyncValidatedSubValues","resolve","asyncValidationIsFinishedPromise","all","flatValidatedValues","every","createValidationError","contexts","_b","validatedValue","promise","customConstraint","getConstraintType","customValidatorMetadata","dismissDefaultMessages","defaultMessage","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","result","done","apply","__generator","body","f","y","t","g","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","Validator","objectOrSchemaName","objectOrValidationOptions","maybeValidatorOptions","coreValidate","validateOrReject","validateSync","executor","defaultContainer","class_1","instances","someClass","getFromContainer","Reflect","_get","fields","_buildFormFields","model","props","getMetadata","prop","field","_getRequiredFieldNames","required_field_names","required","_setValueChanges","changes","_changes","_attachEventListeners","on_events","callback","entries","eventName","shouldListen","node","addEventListener","_attachOnClearErrorEvents","clear_errors_on_events","_linkValues","fromFieldsToModel","len","_linkFieldErrors","filter_term","_linkErrors","err","_hanldeValueLinking","link_fields_to_model","all_fields_or_just_one","checkAllFieldLink","_linkFieldValues","_handleValidationCallbacks","when","cb","_executeFunctions","funcs","func","_executeIfTrue","is_true","_handleValidationEvent","form","required_fields","stateful_items","initial_state_str","field_names","performance_options","link_all_values_on_event","Boolean","enable_change_detection","value_changes","schemaNameOrObject","validation_options","_handleFormValidation","enable_hidden_fields_detection","_hideFields","hidden_fields","enable_disabled_fields_detection","_disableFields","disabled_fields","_hasStateChanged","_requiredFieldsValid","valid","errs","_getStateSnapshot","item","JSON","stringify","changed","_clearState","initial_state","refs","_setInitialState","parse","_resetState","model_state","mkey","_createOrder","field_order","newLayout","leftovers","field_index","_hideField","hidden","_disableField","disabled","factory","root","exporter","makeExporter","previous","hasOwn","hasOwnProperty","supportsSymbol","toPrimitiveSymbol","toPrimitive","iteratorSymbol","supportsCreate","create","supportsProto","__proto__","downLevel","HashMap","MakeDictionary","has","functionPrototype","getPrototypeOf","usePolyfill","process","env","_Map","CreateMapPolyfill","_Set","CreateSetPolyfill","Metadata","WeakMap","CreateWeakMapPolyfill","decorate","decorators","propertyKey","IsUndefined","IsArray","IsConstructor","DecorateConstructor","IsObject","IsNull","DecorateProperty","ToPropertyKey","metadataKey","metadataValue","decorator","IsPropertyKey","OrdinaryDefineOwnMetadata","defineMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","getMetadataKeys","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","delete","size","targetMetadata","decorated","descriptor","O","Create","MetadataKey","parent","OrdinaryGetPrototypeOf","ToBoolean","MetadataValue","ownKeys","parentKeys","_i","ownKeys_1","add","parentKeys_1","GetIterator","k","IteratorStep","nextValue","IteratorValue","IteratorClose","Type","x","IsSymbol","ToPrimitive","input","PreferredType","hint","exoticToPrim","GetMethod","OrdinaryToPrimitive","toString_1","IsCallable","valueOf","toString_2","argument","ToString","V","obj","method","iterResult","proto","prototypeProto","cacheSentinel","arraySentinel","MapIterator","_index","_keys","_values","_selector","_cacheKey","_cacheIndex","_find","clear","getKey","getValue","getEntry","insert","_map","UUID_SIZE","rootKey","CreateUniqueKey","_key","table","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","buffer","Math","random","GenRandomBytes","Uint8Array","crypto","getRandomValues","msCrypto","data","offset","byte","toLowerCase","__","re_init","update_initial_state","buildFields","updateInitialState","fields_with_ref_keys","ref_key","event","field_name","withMessage","removeEventListener","ev","order","names","setOrder","attachRefData","config"],"mappings":"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"}